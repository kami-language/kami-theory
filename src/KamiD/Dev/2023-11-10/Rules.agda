{-# OPTIONS --allow-unsolved-metas #-}

module KamiD.Dev.2023-11-10.Rules where

open import Agora.Conventions hiding (Œ£)
open import Agora.Data.Power.Definition
open import Data.Fin
open import Data.Nat hiding (_!)
open import Relation.Nullary.Decidable.Core
open import KamiD.Dev.2023-11-10.Core

Name = String

data Kind : ùí∞‚ÇÄ where
  ùëÜ : Kind

data Ctx : ùí∞‚ÇÄ
data _‚ä¢Type!_ : (Œì : Ctx) -> Kind -> ùí∞‚ÇÄ
-- data _‚ä¢Type : (Œì : Ctx) -> ùí∞‚ÇÄ
-- data _‚ä¢Var!_ : (Œì : Ctx) ->  -> ùí∞‚ÇÄ
data _‚ä¢Shapes! : (Œì : Ctx) -> ùí∞‚ÇÄ
data _‚ä¢!_ : ‚àÄ{k} -> (Œì : Ctx) -> Œì ‚ä¢Type! k -> ùí∞‚ÇÄ
data _‚äá_ : (Œì : Ctx) (Œî : Ctx) -> ùí∞‚ÇÄ

infixl 40 _‚äá_

record _‚ä¢Type_ (Œì : Ctx) (k : Kind) : ùí∞‚ÇÄ where
  inductive
  pattern
  constructor _‚ä©_
  field ctx : Ctx
  field {{jni}} : Œì ‚äá ctx
  field typ : ctx ‚ä¢Type! k

infixl 50 _‚ä©_

open _‚ä¢Type_ public

instance
  hasNotation-!:‚ä¢Type : ‚àÄ{Œì k} -> hasNotation-! (Œì ‚ä¢Type k) (Œª x -> x .ctx ‚ä¢Type! k)
  hasNotation-!:‚ä¢Type = record { _! = Œª a ‚Üí a .typ }


data Ctx where
  [] : Ctx
  _,[_‚à∂_] : (Œì : Ctx) -> Name -> ‚àÄ{k} -> _‚ä¢Type_ Œì k -> Ctx

infixl 50 _,[_‚à∂_]

data _‚ä¢Varkind_ : (Œì : Ctx) -> (k : Kind) -> Set where
  zero : ‚àÄ{Œì x k} -> {A : Œì ‚ä¢Type k} -> Œì ,[ x ‚à∂ A ] ‚ä¢Varkind k
  suc : ‚àÄ{Œì x k j} -> {A : Œì ‚ä¢Type k} -> Œì ‚ä¢Varkind j -> Œì ,[ x ‚à∂ A ] ‚ä¢Varkind j

data _‚äá_ where
  instance empty : [] ‚äá []
  instance take : ‚àÄ{Œì Œî Œï k x} -> {A : Œï ‚ä¢Type! k} -> {{_ : Œì ‚äá Œî}} -> {{_ : Œî ‚äá Œï}} -> {{_ : Œì ‚äá Œï}} -> Œì ,[ x ‚à∂ Œï ‚ä© A ] ‚äá Œî ,[ x ‚à∂ Œï ‚ä© A ]
  instance skip : ‚àÄ{Œì Œî Œï k x} -> {A : Œï ‚ä¢Type! k} -> {{_ : Œì ‚äá Œî}} -> {{_ : Œì ‚äá Œï}} -> Œì ,[ x ‚à∂ Œï ‚ä© A ] ‚äá Œî

isTop-‚äá-[] : ‚àÄ{Œì} -> Œì ‚äá []
isTop-‚äá-[] {[]} = empty
isTop-‚äá-[] {Œì ,[ x ‚à∂ Œï ‚ä© A ]} = skip {{isTop-‚äá-[]}} {{it}}

id-‚äá : ‚àÄ{Œì} -> Œì ‚äá Œì
id-‚äá {[]} = empty
id-‚äá {Œì ,[ x ‚à∂ Œï ‚ä© A ]} = take {{id-‚äá}} {{it}}

module _ where
  private instance
    _ = isTop-‚äá-[]
    _ = id-‚äá
  data _‚Ü§_‚à™_ : (Œì Œî Œï : Ctx) -> {{_ : Œì ‚äá Œî}} -> {{_ : Œì ‚äá Œï}} -> ùí∞‚ÇÄ where
    emptyleft : ‚àÄ{Œì} -> Œì ‚Ü§ Œì ‚à™ []
    emptyright : ‚àÄ{Œì} -> Œì ‚Ü§ [] ‚à™ Œì
    takeleft : ‚àÄ{Œì Œì‚ÇÄ Œî Œï k x} -> {A : Œì‚ÇÄ ‚ä¢Type! k}
     -> {{_ : Œì ‚äá Œï}} -> {{_ : Œì ‚äá Œî}}
     -> {{_ : Œî ‚äá Œì‚ÇÄ}} -> {{_ : Œì ‚äá Œì‚ÇÄ}}
     -> {{_ : Œì ‚Ü§ Œî ‚à™ Œï}}
     -> _‚Ü§_‚à™_ (Œì ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) (Œî ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) Œï {{take}} {{skip}}
    takeright : ‚àÄ{Œì Œì‚ÇÄ Œî Œï k x} -> {A : Œì‚ÇÄ ‚ä¢Type! k}
     -> {{_ : Œì ‚äá Œï}} -> {{_ : Œì ‚äá Œî}}
     -> {{_ : Œï ‚äá Œì‚ÇÄ}} -> {{_ : Œì ‚äá Œì‚ÇÄ}}
     -> {{_ : Œì ‚Ü§ Œî ‚à™ Œï}}
     -> _‚Ü§_‚à™_ (Œì ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) Œî (Œï ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) {{skip}} {{take}}
    takeboth : ‚àÄ{Œì Œì‚ÇÄ Œî Œï k x} -> {A : Œì‚ÇÄ ‚ä¢Type! k}
     -> {{_ : Œì ‚äá Œï}} -> {{_ : Œì ‚äá Œî}}
     -> {{_ : Œï ‚äá Œì‚ÇÄ}} -> {{_ : Œî ‚äá Œì‚ÇÄ}} -> {{_ : Œì ‚äá Œì‚ÇÄ}}
     -> {{_ : Œì ‚Ü§ Œî ‚à™ Œï}}
     -> _‚Ü§_‚à™_ (Œì ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) (Œî ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) (Œï ,[ x ‚à∂ Œì‚ÇÄ ‚ä© A ]) {{take}} {{take}}

-- record WithVar {Œï k} (A : Œï ‚ä¢Type! k) : ùí∞‚ÇÄ where
--   field name : Name

--   private instance _ = id-‚äá

--   getCtxWithVar : Ctx
--   getCtxWithVar = Œï ,[ name ‚à∂ Œï ‚ä© A ]

-- open WithVar public

-- instance
--   Notation-Absolute-WithVar : ‚àÄ{Œï k} -> {A : Œï ‚ä¢Type! k} -> Notation-Absolute (WithVar A) Ctx
--   Notation-Absolute-WithVar = record { ‚à£_‚à£ = getCtxWithVar }

_‚à∂!_ : ‚àÄ x -> ‚àÄ {Œï k} (A : Œï ‚ä¢Type! k) -> Ctx
_‚à∂!_ x {Œï} A = Œï ,[ x ‚à∂ Œï ‚ä© A ]
  where instance _ = id-‚äá

record _‚ä¢Var_‚à∂_ {k} (Œì : Ctx) (i : Œì ‚ä¢Varkind k) {Œï : Ctx} (A : Œï ‚ä¢Type! k) : Set where
  constructor var_by_
  inductive
  field name : Name
  field ‚ü®_‚ü© : Œì ‚äá (name ‚à∂! A)

open _‚ä¢Var_‚à∂_ public

data _‚ä¢Type!_ where
  -- Shape : [] ‚ä¢Type!
  ùíÆ : ‚àÄ{Œì} -> Œì ‚ä¢Shapes! -> Œì ‚ä¢Type! ùëÜ

data _‚ä¢Shapes! where
  [] : [] ‚ä¢Shapes!
  _&_ : ‚àÄ{Œì Œî Œï} -> {{_ : Œì ‚äá Œî}}
        -> Œî ‚ä¢Shapes!
        -> ‚àÄ x -> {A : Œï ‚ä¢Type! ùëÜ}
        -> {{X : Œì ‚ä¢Var x ‚à∂ A}}
        -- -> {{X : Œì ‚äá (x ‚à∂! A)}}
        -> let instance _ = ‚ü® X ‚ü©
           in {{_ : Œì ‚Ü§ Œî ‚à™ (_ ‚à∂! A)}}
        -> Œì ‚ä¢Shapes!

infixl 40 _&_

data _‚ä¢!_ where
  -- ùíÆ : ‚àÄ

--------------------------------------------------------------------

len-Ctx : Ctx -> ‚Ñï
len-Ctx [] = 0
len-Ctx (Œì ,[ x ‚à∂ x‚ÇÅ ]) = suc (len-Ctx Œì)


instance
  Notation-Absolute-Ctx : Notation-Absolute Ctx ‚Ñï
  Notation-Absolute-Ctx = record { ‚à£_‚à£ = len-Ctx }




