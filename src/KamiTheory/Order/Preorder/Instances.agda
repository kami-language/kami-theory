
{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Order.Preorder.Instances where

open import Data.Fin using (Fin ; zero ; suc)
open import Data.Nat using (_+_)


open import Agora.Conventions hiding (_‚à∑_)
open import Agora.Order.Preorder
open import Agora.Setoid.Definition
-- open import Agora.Data.Universe.Definition
-- open import Agora.Data.Product.Definition

open import KamiTheory.Basics


-------------------
-- We show that Bool is a preorder with false ‚â§ true.

macro
  ùüö = #structureOn Bool

data _‚â§-ùüö_ : Bool -> Bool -> ùí∞‚ÇÄ where
  refl-‚â§-ùüö : ‚àÄ{b} -> b ‚â§-ùüö b
  step : false ‚â§-ùüö true


_‚ü°-‚â§-ùüö_ : ‚àÄ{a b c : Bool} -> a ‚â§-ùüö b -> b ‚â§-ùüö c -> a ‚â§-ùüö c
refl-‚â§-ùüö ‚ü°-‚â§-ùüö q = q
step ‚ü°-‚â§-ùüö refl-‚â§-ùüö = step

instance
  isPreorderData:‚â§-ùüö : isPreorderData ùüö _‚â§-ùüö_
  isPreorderData:‚â§-ùüö = record
    { refl-‚â§ = refl-‚â§-ùüö
    ; _‚ü°_ = _‚ü°-‚â§-ùüö_
    ; transp-‚â§ = Œª {refl refl p -> p}
    }

instance
  isPreorder:ùüö : isPreorder _ ùüö
  isPreorder:ùüö = record { _‚â§_ = _‚â§-ùüö_ }

decide-‚â§-ùüö : ‚àÄ(a b : ùüö) -> isDecidable (a ‚â§ b)
decide-‚â§-ùüö false false = yes refl-‚â§
decide-‚â§-ùüö false true = yes step
decide-‚â§-ùüö true false = no Œª ()
decide-‚â§-ùüö true true = yes refl-‚â§

instance
  isDecidablePreorder:ùüö : isDecidablePreorder ùüö
  isDecidablePreorder:ùüö = record { decide-‚â§ = decide-‚â§-ùüö }

decide-‚â°-Bool : (a b : Bool) -> isDecidable (a ‚â° b)
decide-‚â°-Bool false false = yes refl
decide-‚â°-Bool false true = no (Œª ())
decide-‚â°-Bool true false = no (Œª ())
decide-‚â°-Bool true true = yes refl

instance
  hasDecidableEquality:ùüö : hasDecidableEquality Bool
  hasDecidableEquality:ùüö = record { _‚âü_ = decide-‚â°-Bool }

force-‚â°-‚â§-ùüö : ‚àÄ{a b} (p q : a ‚â§-ùüö b) -> p ‚â° q
force-‚â°-‚â§-ùüö refl-‚â§-ùüö refl-‚â§-ùüö = refl
force-‚â°-‚â§-ùüö step step = refl

instance
  isProp:‚â§-ùüö : ‚àÄ{a b} -> isProp (a ‚â§-ùüö b)
  isProp:‚â§-ùüö = record { force-‚â° = force-‚â°-‚â§-ùüö }


-------------------
-- This means that all families I -> ùüö are also preorders.
--
-- What we show here is that the families (ùîΩ n) -> ùüö are
-- decidable preorders.
--

decide-‚â§-ùîΩ‚Üíùüö : {n : ‚Ñï} -> ‚àÄ(f g : ùîΩ n -> ùüö) -> isDecidable (f ‚â§ g)
decide-‚â§-ùîΩ‚Üíùüö {n = zero} f g = yes Œª ()
decide-‚â§-ùîΩ‚Üíùüö {n = suc n} f g with decide-‚â§ (f zero) (g zero)
... | no p = no Œª q -> p (q zero)
... | yes p1 with decide-‚â§-ùîΩ‚Üíùüö (Œª i -> f (suc i)) (Œª i -> g (suc i))
... | no p = no Œª q -> p (Œª i -> q (suc i))
... | yes p2 = yes Œª {zero -> p1 ; (suc i) -> p2 i}

instance
  isDecidablePreorder:ùîΩ‚Üíùüö : isDecidablePreorder (ùîΩ n ‚Üí# ùüö)
  isDecidablePreorder:ùîΩ‚Üíùüö = record { decide-‚â§ = decide-‚â§-ùîΩ‚Üíùüö }




decide-‚â°-ùîΩ‚Üíùüö : {n : ‚Ñï} -> ‚àÄ(f g : ùîΩ n -> ùüö) -> isDecidable (f ‚â° g)
decide-‚â°-ùîΩ‚Üíùüö {n = zero} f g = yes {!!}
decide-‚â°-ùîΩ‚Üíùüö {n = suc n} f g with (f zero) ‚âü (g zero)
... | no p = no Œª q -> {!!} -- p (q zero)
... | yes p1 with decide-‚â°-ùîΩ‚Üíùüö (Œª i -> f (suc i)) (Œª i -> g (suc i))
... | no p = no Œª q -> {!!} -- p (Œª i -> q (suc i))
... | yes p2 = yes {!!} -- Œª {zero -> p1 ; (suc i) -> p2 i}

instance
  hasDecidableEquality:ùîΩ‚Üíùüö : hasDecidableEquality (ùîΩ n ‚Üí# ùüö)
  hasDecidableEquality:ùîΩ‚Üíùüö = record { _‚âü_ = decide-‚â°-ùîΩ‚Üíùüö }

-- module _ {A : ùí∞ ùëò} {{_ : isSetoid {ùëñ} A}} {{_ : isPreorder ùëó ‚Ä≤ A ‚Ä≤}} {I : ùí∞ ùëô} where
--   module _ {{_ : ‚àÄ{a b : A} -> isProp (a ‚â§ b)}} where
--
--     force-‚â°-‚â§-Family : ‚àÄ{f g : I -> A} -> (p q : f ‚â§ g) -> p ‚â° q
--     force-‚â°-‚â§-Family p q = {!!}
--
--     instance
--       isProp:‚â§-Family : ‚àÄ{f g : I -> A} -> isProp (f ‚â§ g)
--       isProp:‚â§-Family = {!!}


---------------------------------------------
-- We build a better behaved family on vectors

open import Data.Vec using ([] ; _‚à∑_ ; _++_) renaming (Vec to StdVec)



-- record Valuation (n : ‚Ñï) : ùí∞ ùëñ where
--   constructor incl
--   field ‚ü®_‚ü© : StdVec Bool n

-- open Valuation public

data PointWise {A : ùí∞ ùëñ} (R : A -> A -> ùí∞ ùëó) : StdVec A n -> StdVec A n -> ùí∞ (ùëñ ÔΩ§ ùëó) where
  [] : PointWise R [] []
  _‚à∑_  : ‚àÄ{a b} {as bs : StdVec A n} -> R a b -> PointWise R as bs -> PointWise R (a ‚à∑ as) (b ‚à∑ bs)

module _ {A : ùí∞ ùëñ} where
  constVec : A -> ‚àÄ n -> StdVec A n
  constVec a zero = []
  constVec a (suc n) = a ‚à∑ constVec a n

  singletonVec : A -> A -> Fin n -> StdVec A n
  singletonVec a b zero = b ‚à∑ constVec a _
  singletonVec a b (suc i) = a ‚à∑ singletonVec a b i

-- module _ {A : ùí∞ ùëñ} {{_ : hasDecidableEquality A}} where
--   instance
--     hasDecidableEquality:Vec : hasDecidableEquality (StdVec A)
--     hasDecidableEquality:Vec = ?

module _ {A : ùí∞ ùëñ} {{_ : isSetoid {ùëó} A}} where

  _‚àº-Vec_ : ‚àÄ(as bs : StdVec A n) -> ùí∞ _
  _‚àº-Vec_ = PointWise _‚àº_

  refl-‚àº-Vec : {x : StdVec A n} ‚Üí x ‚àº-Vec x
  refl-‚àº-Vec {x = []} = []
  refl-‚àº-Vec {x = x ‚à∑ x‚ÇÅ} = refl-‚àº ‚à∑ refl-‚àº-Vec

  sym-‚àº-Vec : {x y : StdVec A n} ‚Üí x ‚àº-Vec y ‚Üí y ‚àº-Vec x
  sym-‚àº-Vec p = {!!}

  _‚àô-‚àº-Vec_ : {x y z : StdVec A n} ‚Üí x ‚àº-Vec y ‚Üí y ‚àº-Vec z ‚Üí x ‚àº-Vec z
  _‚àô-‚àº-Vec_ = {!!}

  instance
    isEquivRel:‚àº-Vec : ‚àÄ{n} -> isEquivRel (_‚àº-Vec_ {n = n})
    isEquivRel:‚àº-Vec = record { refl-‚àº = refl-‚àº-Vec ; sym = sym-‚àº-Vec ; _‚àô_ = _‚àô-‚àº-Vec_ }

  instance
    isSetoid:Vec : isSetoid (StdVec A n)
    isSetoid:Vec = record { _‚àº_ = _‚àº-Vec_ }

module _ {A : ùí∞ ùëñ} {{_ : isSetoid {ùëó} A}} {{_ : isPreorder ùëò ‚Ä≤ A ‚Ä≤}} where

  _‚â§-Vec_ : ‚àÄ(as bs : StdVec A n) -> ùí∞ _
  _‚â§-Vec_ = PointWise _‚â§_

  refl-‚â§-Vec : {a : StdVec A n} ‚Üí a ‚â§-Vec a
  refl-‚â§-Vec {a = []} = []
  refl-‚â§-Vec {a = x ‚à∑ a} = refl-‚â§ ‚à∑ refl-‚â§-Vec

  instance
    isPreorderData:Vec : isPreorderData ‚Ä≤ (StdVec A n) ‚Ä≤ _‚â§-Vec_
    isPreorderData:Vec = record { refl-‚â§ = refl-‚â§-Vec ; _‚ü°_ = {!!} ; transp-‚â§ = {!!} }

  instance
    isPreorder:Vec : isPreorder _ ‚Ä≤ (StdVec A n) ‚Ä≤
    isPreorder:Vec = record { _‚â§_ = _‚â§-Vec_ }

