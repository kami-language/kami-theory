{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Dev.2024-01-09.Core where

open import Agora.Conventions hiding (Œ£)
open import Agora.Data.Power.Definition
open import Data.Fin
open import Data.Nat hiding (_!)
open import Data.List using (List ; [] ; _‚à∑_)
open import Data.String
open import Relation.Nullary.Decidable.Core


record ‚àë‚Çï {A : ùí∞ ùëñ} (B : {{_ : A}} -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  constructor make‚àë‚Çï
  field {{fst}} : A
  field snd : B {{fst}}
open ‚àë‚Çï public

pattern _,‚Çï_ f s = make‚àë‚Çï {{f}} s
infixr 30 _,‚Çï_

record hasNotation-! (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  field _! : (a : A) -> B a
  infixl 200 _!

open hasNotation-! {{...}} public

record hasNotation-wk (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  field wk : (a : A) -> B a

open hasNotation-wk {{...}} public

record hasNotation-ùï† (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  field ùï† : (a : A) -> B a

open hasNotation-ùï† {{...}} public

record hasNotation-Ôº† (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) (C : ‚àÄ(a : A) -> B a -> ùí∞ ùëò) : ùí∞ (ùëñ ÔΩ§ ùëó ÔΩ§ ùëò) where
  field _Ôº†_ : (a : A) -> (b : B a) -> C a b

open hasNotation-Ôº† {{...}} public


record hasNotation-refine (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  field refine : (a : A) -> B a

open hasNotation-refine {{...}} public

record hasNotation-‚ãÜ (A : ùí∞ ùëñ) (B : A -> ùí∞ ùëó) (C : ‚àÄ(a : A) -> B a -> ùí∞ ùëò) : ùí∞ (ùëñ ÔΩ§ ùëó ÔΩ§ ùëò) where
  field _‚ãÜ_ : (a : A) -> (b : B a) -> C a b

  infixl 40 _‚ãÜ_

open hasNotation-‚ãÜ {{...}} public


{-# BUILTIN REWRITE _‚â£_ #-}

Name = ‚Ñï


module _ {A B : ùí∞ ùëñ} where
  transp-‚â£ : (A ‚â£ B) -> A -> B
  transp-‚â£ refl-‚â£ a = a

module _ {A : ùí∞ ùëñ} {B : ùí∞ ùëó} {C : ùí∞ ùëò} where
  cong‚ÇÇ-‚â£ : (f : A -> B -> C) -> ‚àÄ{a‚ÇÄ a‚ÇÅ : A} -> ‚àÄ{b‚ÇÄ b‚ÇÅ : B} -> a‚ÇÄ ‚â£ a‚ÇÅ -> b‚ÇÄ ‚â£ b‚ÇÅ -> f a‚ÇÄ b‚ÇÄ ‚â£ f a‚ÇÅ b‚ÇÅ
  cong‚ÇÇ-‚â£ f refl-‚â£ refl-‚â£ = refl-‚â£

-- cong-‚â£ : {A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} -> (f : (a : A) -> B a) -> {a b : A} -> (a ‚â£ b) -> f a ‚â£ f b
cong-‚â£ : {A : ùí∞ ùëñ} {B : ùí∞ ùëó} -> (f : A -> B) -> {a b : A} -> (a ‚â£ b) -> f a ‚â£ f b
cong-‚â£ f refl-‚â£ = refl-‚â£

ap‚ÇÄ : ‚àÄ{A : ùí∞ ùëñ} {a b : A} -> a ‚â£ b -> A
ap‚ÇÄ {a = a} _ = a

ap‚ÇÅ : ‚àÄ{A : ùí∞ ùëñ} {a b : A} -> a ‚â£ b -> A
ap‚ÇÅ {b = b} _ = b

J1 : ‚àÄ{A : ùí∞ ùëñ} {B : ùí∞ ùëò} -> ‚àÄ{a b : A} -> (p : a ‚â£ b) -> (F : A -> ùí∞ ùëó) -> (f : ‚àÄ a -> F a -> B) -> (x : F a) -> f b (transp-‚â£ (cong-‚â£ F p) x) ‚â£ f a x
J1 refl-‚â£ F f x = refl-‚â£

K1 : ‚àÄ{A : ùí∞ ùëñ} -> {a : A} -> (p : a ‚â£ a) -> p ‚â£ refl-‚â£
K1 refl-‚â£ = refl-‚â£

-- _‚â£‚ü®_‚ü©‚â£_ : {A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} -> {a‚ÇÄ a‚ÇÅ : A} -> (b‚ÇÄ : B a‚ÇÄ) -> (a‚ÇÄ ‚â£ a‚ÇÅ) -> (b‚ÇÅ : B a‚ÇÅ) -> ùí∞ _
-- _‚â£‚ü®_‚ü©‚â£_ b‚ÇÄ p b‚ÇÅ = transp-‚â£ (cong-‚â£ _ p) b‚ÇÄ ‚â£ b‚ÇÅ

_‚â£‚ü®_‚ü©‚â£_ : {A B : ùí∞ ùëñ} -> (a : A) -> (A ‚â£ B) -> (b : B) -> ùí∞ _
_‚â£‚ü®_‚ü©‚â£_ a p b = transp-‚â£ p a ‚â£ b

--  : ‚àÄ{A : ùí∞ ùëñ} -> ‚àÄ{a b : A} -> (p : a ‚â£ b) -> (B : A -> ùí∞ ùëó) -> {C : (a : A) -> (B a) -> ùí∞ ùëò}  -> (f : ‚àÄ a -> (b : B a) -> C a b) -> (x : B a) -> f a (transp-‚â£ (cong-‚â£ B p) x) ‚â£ f b x
-- J2 = ?
-- J1 refl-‚â£ F f x = refl-‚â£


-- module _ {A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} {C : ‚àÄ a -> B a -> ùí∞ ùëò} where
--   cong‚ÇÇd-‚â£ : (f : (a : A) -> (b : B a) -> C a b) -> ‚àÄ{a‚ÇÄ a‚ÇÅ : A} -> (p : a‚ÇÄ ‚â£ a‚ÇÅ) -> ‚àÄ{b‚ÇÄ : B a‚ÇÄ} -> {b‚ÇÅ : B a‚ÇÅ} -> transp-‚â£ (cong-‚â£ B p) b‚ÇÄ ‚â£ b‚ÇÅ -> J1 p B f b‚ÇÄ ‚â£ f a‚ÇÅ b‚ÇÅ
--   cong‚ÇÇd-‚â£ f = ?
  -- refl-‚â£ refl-‚â£ = refl-‚â£

