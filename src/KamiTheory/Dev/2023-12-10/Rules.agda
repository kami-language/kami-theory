-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Dev.2023-12-10.Rules where

open import Agora.Conventions hiding (Œ£ ; Lift)
open import Agora.Data.Power.Definition
open import Data.Fin
open import Data.Nat hiding (_!)
open import Relation.Nullary.Decidable.Core
open import KamiTheory.Dev.2023-12-05.Core

Name = ‚Ñï

---------------------------------------------------------------
-- Current goal (2023-12-10):
--
-- Types are indexed by their spatial space and their number
-- of time steps.
-- The topology is always Space x Time. There is, for now,
-- a distinction between the topological context and the
-- value context.
--
-- A variant which merges both might be developed in the future.
-- Types are formally maps on the points, and terms are maps
-- on the arrows.
--
-- A type is given by:
--  1. An assignment of types on the spatial arrow,
--  2. An assignment of types locally on the subset
--
-- We can write local types which describe the behaviour at
-- exactly a single role. And we can write types which describe
-- the down-connecting behaviour. A full type at a point contains:
-- a local type and for each down-arrow a type for that arrow.
--
-- We can project down-arrow types to types at the lower location.
-- An implementation for a full type mapping is given by giving an
-- implementation of the head, and then giving implementations for
-- the sum of the down projections...
--
-- Types can be given for upper sets. Once we have types for higher
-- open sets, we can construct a type for a lower open set (which is
-- bigger) by giving down-arrow-types for the next down arrows.
-- => Only top-level elements can have open local types...
-- => I can glue such a type together only if this local type matches
-- >>exactly<< with the down projection(s) from above.
--
-- Though there are also time-boundaries to the bottom... (maybe there
-- are not!) And they can only be there for the current top-level points
-- which are the actual processes we care about!
--
-- We can implement a type by implementing the local projections for each
-- point. These projections might give you negative or positive obligations,
-- where such a term is introduced by many lambdas, and at the end a series
-- of obligation-closers, where for each obligation we can only use variables
-- which are below...
--
-- Every term has to consume all negative variables, by filling them.
-- To fill a negative variable, you can only use part of the context
-- which is (‚â§) below you. By default every type can only be used at their
-- time point... A term always happens at a point in time.
--
-- Basic types might be positive or negative. Variables in the context
-- can be negative or positive or mixed. Mixed means I have to use them at their
-- time location (because they might be negative). We could say that positivity
-- is a modality, so that I can restrict the context to positive, and use those
-- further on... Also types can only depend on the positive subcontext...
--
-- A sequence of terms has to end in a purely positive context. For this we can
-- destructure the types in the context... Functions consume their input wholy.
-- Normal var projections mark a variable as "used". The app-rule makes sure that
-- it cannot be that both sides use the same variable. The var* projection rule
-- does not mark any variable as used. There is only one function type, since
-- it is enough to provide the correct matching type.
--
-- There are two var projections, one gives you the proper var, and says so in
-- the context. The other projects only the positive fragment, and says so in
-- the context. Then all rules which have two subterms, ensure that the resulting
-- context is a join where all possibly negative parts only appear on a single
-- side.
--
-- If a variable is purely positive, its split is irrelevant, in the sense that
-- it might be given to the left or to the right term.
--
-- For dependent types, we can depend on the positivitization of the context.
-- This means that we can use both positive and negative variables in types.
--
-- We have the restriction to positive fragments which happens when splitting
-- the context, and we have the positivitization for variables occuring in types,
-- that is in "dull" locations. => There is the dullification of a type, as
-- well as the positivitization.
--
-- We have a splitting of the context where we can choose for each variable:
--   -- we keep it whole in exactly one subcontext
--   -- we look at paths inside it, and decide for each path individually
--
-- This means in particular that the positive fragmentation which occurs in the
-- context is path-based. We don't change the types in the context, but we add
-- fragmentation cues. In this sense, the dullification breaks these cues again.
--
-- For the fragmentation in the type, we only allow full-neg-deletion. (for now)
--
-- Variables can be projected, this constructs a fragmentation annotation for the context.
--
--
-- Considering the context structure:
-- We have global (multi-) types and local types. Multitypes are "choreographies",
-- though they might of course be also simply assignments of values to different
-- locations. We can only access variables whose location-set is subset of our
-- current term goal location-set. There is a projection term-constructor which
-- projects from a set to a subset.
--
-- Goal: every multi-typed term is equivalent to the "sum" of its projected components.
-- In general the quantifiers take multi-types.
--
--
-- About variables/types which contain both positive and negative parts. When
-- we fill the negative parts, we have to substitute everything which depended on
-- that negative variable part with that value. But: When we give a negative value
-- into a function, we don't know how that function is going to fill that negative
-- variable. This means that there are three states for (X (Œ®[ x ‚Ü¶ Y ] Z)):
--
--  - at X: we see that the inner term has filled the full x variable, but
--    we don't know which value is inside
--  - at Y: we cannot access x, because we are setting its value
--  - at Z: we don't have the x value, we have substituted it for Y
--
-- OR: The filling operation creates a proof of value.




-- spaces
data Space : ùí∞‚ÇÄ
data _‚ä¢Subspace : Space -> ùí∞‚ÇÄ
data _‚ä¢Pt : Space -> ùí∞‚ÇÄ
data _‚ä¢Ln_‚áæ_ : (Œ£ : Space) -> (a b : Œ£ ‚ä¢Pt) -> ùí∞‚ÇÄ

private variable
  Œ£ : Space

-- times
data Time : ùí∞‚ÇÄ
data _‚ä¢T : Time -> ùí∞‚ÇÄ
data _‚ä¢TExt : Time -> ùí∞‚ÇÄ
data _‚ä¢T_ : (Œ§ : Time) -> Œ§ ‚ä¢TExt -> ùí∞‚ÇÄ
data _‚ä¢_<T_ : (Œ§ : Time) -> ‚àÄ{X} -> (s t : Œ§ ‚ä¢T X) -> ùí∞‚ÇÄ

private variable
  Œ§ : Time

-- types
data Ctx : Space -> Time -> ùí∞‚ÇÄ

private variable
  Œì : Ctx Œ£ Œ§

data _‚ä¢Type_ : ‚àÄ (Œì : Ctx Œ£ Œ§) -> Œ£ ‚ä¢Subspace -> ùí∞‚ÇÄ
-- data _‚ä¢VType_,_ : ‚àÄ Œ£ (Œì : Ctx Œ£ Œ§) -> Œ£ ‚ä¢Pt -> ‚Ñï -> ùí∞‚ÇÄ
data _‚ä¢PtType_ : ‚àÄ (Œì : Ctx Œ£ Œ§) -> Œ£ ‚ä¢Pt -> ùí∞‚ÇÄ
data _‚ä¢PtBase_ : ‚àÄ (Œì : Ctx Œ£ Œ§) -> Œ£ ‚ä¢Pt -> ùí∞‚ÇÄ
data _‚ä¢LnType_ : ‚àÄ (Œì : Ctx Œ£ Œ§) -> ‚àÄ{a b} -> Œ£ ‚ä¢Ln a ‚áæ b -> ùí∞‚ÇÄ

-- terms
data _‚ä¢Pt_ : ‚àÄ (Œì : Ctx Œ£ Œ§) {x} -> (A : Œì ‚ä¢PtType x) -> ùí∞‚ÇÄ

private variable
  U V : Œ£ ‚ä¢Subspace
  x y : Œ£ ‚ä¢Pt


---------------------------------------------
-- parameters for basic types
data Charge : ùí∞‚ÇÄ where
  ‚Å∫ ‚Åª : Charge

Param : (Œ£ : Space) -> (Œ§ : Time) -> ùí∞‚ÇÄ
Param Œ£ Œ§ = Charge √ó-ùí∞ Œ§ ‚ä¢T


-- _‚¶ò_ : ‚àÄ{A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} -> (a : A) -> (‚àÄ (a : A) -> B a) -> B a
-- _‚¶ò_ a f = f a

-- ‚Ñï ‚¶ó ‚Å∫ t	‚¶ò


-- ‚¶ã ‚Å∫ t	‚¶å

-- ‚¶â ‚Å∫ t	‚¶ä

-- ‚¶ë ‚Å∫ t ‚¶í

-- ‚¶ã ‚Å∫ t	‚¶å


-- ‚¶á ‚Å∫ t ‚¶à

--   ‚ßµ
--  	‚ß∂ 	‚ß∑ 	 	‚ßπ 
-- ‚¶Ö 	‚¶Ü 	‚¶á 	‚¶à 	‚¶â 	‚¶ä 	‚¶ã 	‚¶å 	‚¶ç 	‚¶é 	‚¶è
-- U+299x 	‚¶ê 	‚¶ë 	‚¶í


---------------------------------------------
-- spaces

data Space where
  [] : Space
  _,Fill_ : (Œ£ : Space) -> Œ£ ‚ä¢Subspace -> Space

data _‚ä¢Pt where
  top : (Œ£ ,Fill U) ‚ä¢Pt

data _‚ä¢Subspace where
  pt : Œ£ ‚ä¢Pt -> Œ£ ‚ä¢Subspace
  ‚àÖ : Œ£ ‚ä¢Subspace

data _‚ä¢Ln_‚áæ_ where

---------------------------------------------
-- times
data Time where
  [] : Time
  _,_ : (Œ§ : Time) -> Œ§ ‚ä¢TExt -> Time
  -- I‚Éó : Time
  -- _,[_<_by_] : (Œ§ : Time) -> (s t : Œ§ ‚ä¢T) -> Œ§ ‚ä¢T s < t -> Time

data _‚ä¢T where
  z : ‚àÄ{X} -> Œ§ ‚ä¢T X -> Œ§ , X ‚ä¢T
  s : ‚àÄ{X} -> Œ§ ‚ä¢T -> Œ§ , X ‚ä¢T

data _‚ä¢TExt where
  I‚Éó : Œ§ ‚ä¢TExt
  _&_ : {Œ§ : Time} -> (X : Œ§ ‚ä¢TExt) -> {s t : Œ§ ‚ä¢T X} -> Œ§ ‚ä¢ s <T t -> Œ§ ‚ä¢TExt

data _‚ä¢T_ where
  zero : Œ§ ‚ä¢T I‚Éó
  one : Œ§ ‚ä¢T I‚Éó
  weak : {X : Œ§ ‚ä¢TExt} -> ‚àÄ{s t} -> {p : Œ§ ‚ä¢ s <T t} -> Œ§ ‚ä¢T X -> Œ§ ‚ä¢T (X & p)
  split : {X : Œ§ ‚ä¢TExt} -> ‚àÄ{s t} -> {p : Œ§ ‚ä¢ s <T t} -> Œ§ ‚ä¢T (X & p)

data _‚ä¢_<T_ where
  arr : Œ§ ‚ä¢ zero <T one





---------------------------------------------
-- types

data Ctx where
  [] : Ctx Œ£ Œ§

  -- this should actually also contain the fragmentation
  -- assignment
  _,[_‚áú_] : ‚àÄ (Œì : Ctx Œ£ Œ§) U -> Œì ‚ä¢Type U -> Ctx Œ£ Œ§

  --------------
  -- Normalizable
  wkT : ‚àÄ T -> Ctx Œ£ Œ§ -> Ctx Œ£ (Œ§ , T)
  _‚ü®_‚ü© : Ctx Œ£ Œ§ -> Œ§ ‚ä¢T -> Ctx Œ£ Œ§

infixl 40 _,[_‚áú_]


data _‚ä¢Type_ where


  -- this should be different, probably this is
  -- actually the closure operation which takes
  -- a somewhat complete term and closes it over
  pt : Œì ‚ä¢PtType x -> Œì ‚ä¢Type pt x

-- data _‚ä¢VType_,_ where
--   End : Œì ‚ä¢PtType x -> Œì ‚ä¢VType x , n
--   [_]‚ñ∂_ : (A : Œì ‚ä¢PtType x)
--             -> Œì ,[ pt x , n ‚áú pt A ] ‚ä¢VType x , suc n
--             -> Œì ‚ä¢VType x , n

-- infixl 40 [_]‚ñ∂_

data _‚ä¢PtType_ where
  -- sum/product
  ‚®á : (A : Œì ‚ä¢PtType x) -> Œì ,[ pt x ‚áú pt A ] ‚ä¢PtType x -> Œì ‚ä¢PtType x

  -- we can restrict a type to a value at a time
  _‚ü®_‚ü© : {Œì : Ctx Œ£ Œ§} -> Œì ‚ä¢PtType x -> Œ§ ‚ä¢T -> Œì ‚ä¢PtType x

  -- we can filter a type to contain only the positive parts
  -- ‚Å∫_ : Œì ‚ä¢PtType x -> Œì ‚ä¢PtType x

  _‚¶ó_‚¶ò : {Œì : Ctx Œ£ Œ§} -> Œì ‚ä¢PtBase x -> Param Œ£ Œ§ -> Œì ‚ä¢PtType x


data _‚ä¢PtBase_ where
  -- natural numbers
  B‚Ñï : Œì ‚ä¢PtBase x

  -- time quantification
  B‚àÄ_,_ : ‚àÄ T -> wkT T Œì ‚ä¢PtType x -> Œì ‚ä¢PtBase x

pattern ‚Ñï‚Å∫ x = B‚Ñï ‚¶ó ‚Å∫ , x ‚¶ò
pattern ‚Ñï‚Åª x = B‚Ñï ‚¶ó ‚Åª , x ‚¶ò
pattern ‚àÄ‚Å∫‚¶ó_‚¶ò[_]_ t x y = (B‚àÄ x , y) ‚¶ó ‚Å∫ , t ‚¶ò

pattern t‚ÇÄ x = z x
pattern t‚ÇÅ x = s (z x)
pattern t‚ÇÇ x = s (s (z x))

-- pattern Nat‚Å∫ x = Nat (‚Å∫ , x)

data _‚ä¢LnType_ where

data _‚ä¢Pt_ where
  -- abs : ‚ü® Œì ‚ü© t ‚ä¢ 
  -- introducing new vars
  -- Œõ : ‚àÄ{x A B}
  --     -> Œì ,[ pt x , n ‚áú pt A ] ‚ä¢V B
  --     -> Œì ‚ä¢V [ A ]‚ñ∂ B

  -- discharging negative vars in the context
  -- we take a path to a var in the context,
  -- and change the context to have a value for that var
  -- Œ® : 


module Example where
  Œ£‚ÇÅ : Space
  Œ£‚ÇÅ = [] ,Fill ‚àÖ

  Œ§‚ÇÅ : Time
  Œ§‚ÇÅ = [] , I‚Éó

  fun : ‚àÄ{Œì : Ctx Œ£‚ÇÅ Œ§‚ÇÅ} -> Œì ‚ä¢PtType top
  fun = ‚àÄ‚Å∫‚¶ó t‚ÇÄ zero ‚¶ò[ I‚Éó ] ‚®á (‚Ñï‚Åª (t‚ÇÅ zero)) (‚Ñï‚Å∫ (t‚ÇÅ one))

  f1 : [] ‚ä¢Pt fun
  f1 = {!!}



{-
-- for spaces, though we keep this implicit

-- data TypeCtx : ùí∞‚ÇÄ
data Ctx : ùí∞‚ÇÄ

private variable
  Œì Œî : Ctx

data _‚áõ_ : Ctx -> Ctx -> ùí∞‚ÇÄ

data _‚ä¢Subspace : Ctx -> ùí∞‚ÇÄ
data _‚ä¢Var : Ctx -> ùí∞‚ÇÄ
data _‚ä¢Point : Ctx -> ùí∞‚ÇÄ

private variable U V : Œì ‚ä¢Subspace

data _‚ä¢Subspace_‚áù_ : ‚àÄ Œì -> Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace -> ùí∞‚ÇÄ
data _‚ä¢Subspace_‚àº_ : ‚àÄ Œì -> Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace -> ùí∞‚ÇÄ

data _‚ä¢_‚äÜ_ : ‚àÄ Œì -> (U V : Œì ‚ä¢Subspace) -> ùí∞‚ÇÄ

-- this property should be decidable and propositional
-- data _‚ä¢Subspace_‚äÜ_ : ‚àÄ Œì -> (U V : Œì ‚ä¢Subspace) -> ùí∞‚ÇÄ


-- this might be both:
-- either a space extension or a space cover
-- data _‚ä¢Space_ : ‚àÄ Œì -> Œì ‚ä¢Subspace -> ùí∞‚ÇÄ
data _‚ä¢Projected_ : ‚àÄ Œì -> Œì ‚ä¢Subspace -> ùí∞‚ÇÄ
-- data _‚ä¢Extended : ‚àÄ Œì -> ùí∞‚ÇÄ

data _‚ä¢Projected_‚áù_ : ‚àÄ Œì {U V} -> Œì ‚ä¢Projected U -> Œì ‚ä¢Projected V -> ùí∞‚ÇÄ
data _‚ä¢Projected_‚àº_ : ‚àÄ Œì {U V} -> Œì ‚ä¢Projected U -> Œì ‚ä¢Projected V -> ùí∞‚ÇÄ


private variable
  X : Œì ‚ä¢Projected U
  Y : Œì ‚ä¢Projected V

data _‚ä¢Point_ : ‚àÄ Œì {U} -> Œì ‚ä¢Projected U -> ùí∞‚ÇÄ
data _‚ä¢Subspace_ : ‚àÄ Œì {U} -> Œì ‚ä¢Projected U -> ùí∞‚ÇÄ

private variable
  S : Œì ‚ä¢Subspace X
  T : Œì ‚ä¢Subspace Y

data _‚ä¢Section_ : ‚àÄ Œì {U} -> Œì ‚ä¢Projected U -> ùí∞‚ÇÄ
-- data _‚ä¢Closed_ : ‚àÄ Œì {U} -> Œì ‚ä¢Projected U -> ùí∞‚ÇÄ

-- TODO: unclear
-- data _‚ä¢Pt : Ctx -> ùí∞‚ÇÄ

-- private variable X : Œì ‚ä¢Space U

-- data _‚ä¢Type_ : ‚àÄ (Œì : Ctx) -> (X : Œì ‚ä¢Subspace) -> ùí∞‚ÇÄ

-- A universe over a subspace U of a context
-- means that this universe can only be used
-- for sums which are at least over this subspace (?)
--
-- A universe has an attached partitioning scheme
data _‚ä¢Universe_ : ‚àÄ (Œì : Ctx) -> (X : Œì ‚ä¢Subspace) -> ùí∞‚ÇÄ

data Ctx where
  [] : Ctx
  _,[_‚Üû_] : ‚àÄ Œì -> ‚àÄ U -> Œì ‚ä¢Projected U -> Ctx
  -- _&_ : ‚àÄ Œì -> Œì ‚ä¢Extended -> Ctx

-- infixl 30 _&_

infixl 40 _,[_‚Üû_]

data _‚áõ_ where
  œÄ‚ÇÄ : Œì ‚áõ Œî ,[ U ‚Üû X ] -> Œì ‚áõ Œî

  id : Œì ‚áõ Œì

data _‚ä¢Var where
  zero : Œì ,[ U ‚Üû X ] ‚ä¢Var
  -- ezero : ‚àÄ {Œì X} -> Œì & X ‚ä¢Var
  suc : Œì ‚ä¢Var -> Œì ,[ U ‚Üû X ] ‚ä¢Var
  -- ‚àû : Œì ‚ä¢Var

data _‚ä¢Point where
  ‚àû : Œì ‚ä¢Point

-- a subspace of the context 
data _‚ä¢Subspace where
  -- ‚àû : Œì ‚ä¢Subspace

  -- a variable contains exactly the subspace which it was created with
  var : Œì ‚ä¢Var -> Œì ‚ä¢Subspace

  pt : Œì ‚ä¢Point -> Œì ‚ä¢Subspace
  ‚àÖ : Œì ‚ä¢Subspace

  -- interiour
  ¬∞_ : Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace

  -- boundary
  ‚àÇ_ : (x : Œì ‚ä¢Subspace) -> Œì ‚ä¢Subspace

  -- closure
  ‚üÆ_‚üØ : Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace

  _‚à™_ : Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace -> Œì ‚ä¢Subspace

  -- the subspace U extended by exactly the points of X which get added in (Œì , X)
  _‚óÅ_ : (U : Œì ‚ä¢Subspace) -> (X : Œì ‚ä¢Projected U) -> Œì ,[ U ‚Üû X ] ‚ä¢Subspace

  -- The embedded subspace of X as added in Œì
  Emb : (X : Œì ‚ä¢Projected U) -> Œì ,[ U ‚Üû X ] ‚ä¢Subspace

  --pullback of subspaces
  _[_] : Œì ‚ä¢Subspace -> Œî ‚áõ Œì -> Œî ‚ä¢Subspace

  -- not normal forms
  -- weak : ‚àÄ{X : Œì ‚ä¢Projected U} -> Œì ‚ä¢Subspace -> Œì ,[ U ‚Üû X ] ‚ä¢Subspace

infixl 100 _[_]
infixl 50 _‚à™_
infixl 150 ¬∞_ ‚àÇ_

data _‚ä¢_‚äÜ_ where
  inj-¬∞ : Œì ‚ä¢ ¬∞ U ‚äÜ U

-- data _‚ä¢Extended where
--   -- the one point compactification
--   _* : ‚àÄ (U : Œì ‚ä¢Subspace) -> Œì ‚ä¢Extended

--   -- sum for extensions
--   ‚à´ : (X : Œì ‚ä¢Extended) -> Œì & X ‚ä¢Extended -> Œì ‚ä¢Extended


data _‚ä¢Projected_ where
  -- the flat modality (discretization of space)
  _‚ô≠ : ‚àÄ U -> Œì ‚ä¢Projected U

  -- sum (and compactification ?)
  ‚à´ : (X : Œì ‚ä¢Projected U) -> Œì ,[ U ‚Üû X ] ‚ä¢Projected (Emb X) -> Œì ‚ä¢Projected U

  -- product
  -- ‚àÆ : (X : Œì ‚ä¢Projected U) -> Œì ,[ U ‚Üû X ] ‚ä¢Projected var zero -> Œì ‚ä¢Projected U

  -- sum over a subspace U
  _‚äï'_ : (X Y : Œì ‚ä¢Projected U) -> Œì ‚ä¢Projected U
  -- ‚àê


  Univ : ‚àÄ{x} -> Œì ‚ä¢Projected var x

  ---- Not normal

  -- restriction along inclusion
  _‚áÇ[_by_] : Œì ‚ä¢Projected V -> ‚àÄ U -> Œì ‚ä¢ U ‚äÜ V -> Œì ‚ä¢Projected U

  -- computes as restriction
  ¬∞_ : Œì ‚ä¢Projected U -> Œì ‚ä¢Projected ¬∞ U

  -- extension of section to closure of space
  -- computes by using the restriction maps and ‚ãÄ-ing the resulting subspaces
  Sub : (X : Œì ‚ä¢Projected U) -> Œì ‚ä¢Section X -> Œì ‚ä¢Projected ‚üÆ U ‚üØ


  -- the identity projected space over U
  -- this is probably not normal
  Id : Œì ‚ä¢Projected U

  -- the empty space over any subspace U
  ‚ä• : Œì ‚ä¢Projected U


  -- pullback of projected spaces
  _[_] : (X : Œî ‚ä¢Projected U) -> (œÉ : Œì ‚áõ Œî) -> Œì ‚ä¢Projected U [ œÉ ]

  ---- Experimental
  -- converting an extension space to a projected space over ‚àû
  -- [_by_]* : ‚àÄ (U : Œì ‚ä¢Subspace) -> (Œì ‚ä¢ U ‚äÜ ‚àÇ ‚üÆ pt ‚àû ‚üØ) -> Œì ‚ä¢Projected (pt ‚àû)

  -- the new extension type (this only works over a pt since we need somewhere to
  -- project the new point to)
  _‚à†_ : (X : Œì ‚ä¢Projected U) -> (V : Œì ‚ä¢Subspace X) -> Œì ‚ä¢Projected U

  _‚ü®_‚ü©·µ£ : Œì ‚ä¢Projected U -> Œì ‚ä¢Subspace U ‚àº V -> Œì ‚ä¢Projected V


infixl 30 _‚áÇ[_by_]
infixl 40 _‚à†_
infixl 50 _‚ü®_‚ü©·µ£

data _‚ä¢Projected_‚áù_ where

data _‚ä¢Projected_‚àº_ where
  subspace : (X : Œì ‚ä¢Projected U) -> (Œ± : Œì ‚ä¢Subspace U ‚àº V) -> Œì ‚ä¢Projected X ‚àº X ‚ü® Œ± ‚ü©·µ£

data _‚ä¢Point_ where
  base : Œì ‚ä¢Point X -> Œì ‚ä¢Point (X ‚à† S)
  ext : Œì ‚ä¢Point (X ‚à† S)


data _‚ä¢Subspace_ where
  pt : Œì ‚ä¢Point X -> Œì ‚ä¢Subspace X
  _‚à®_ : (S T : Œì ‚ä¢Subspace X) -> Œì ‚ä¢Subspace X
  ‚àÖ : Œì ‚ä¢Subspace X

-- data _‚ä¢Closed_ where
  -- zero : Œì ,[ U ‚Üû X ] ‚ä¢Closed {!!}

_‚áÇ¬∞ : Œì ‚ä¢Projected U -> Œì ‚ä¢Projected ¬∞ U
_‚áÇ¬∞ {U = U} X = X ‚áÇ[ ¬∞ U by {!!} ]

infixl 200 _‚áÇ¬∞


data _‚ä¢Section_ where
  -- œÄ‚ÇÅ : (œÉ : Œì ‚áõ Œî ,[ U ‚Üû X ]) -> Œì ‚ä¢Section (X [ œÄ‚ÇÄ œÉ ])

  -- a section can be constructed by splitting the source space into interiour and boundary
  split : ‚àÄ{U} -> {X : Œì ‚ä¢Projected U}
          -> (s : Œì ‚ä¢Section X ‚áÇ¬∞)
          -> Œì ‚ä¢Section Sub _ s
          -> Œì ‚ä¢Section X

  _‚Ü¶_ : ‚àÄ a -> {X : Œì ‚ä¢Projected pt a} -> Œì ‚ä¢Point X -> Œì ‚ä¢Section X

  _‚ü®_‚ü©·µ£ : {X : Œì ‚ä¢Projected U} -> {Y : Œì ‚ä¢Projected V}
        -> Œì ‚ä¢Section X -> Œì ‚ä¢Projected X ‚àº Y -> Œì ‚ä¢Section Y



-- wk-‚áõ : Œì ,[ U ‚Üû X ] ‚áõ Œì
-- wk-‚áõ = œÄ‚ÇÄ id

-- vz : Œì ,[ U ‚Üû X ] ‚ä¢Section X [ wk-‚áõ ]
-- vz = œÄ‚ÇÅ id

-- vs : (Œì ‚ä¢Section Y) -> (Œì ,[ U ‚Üû X ] ‚ä¢Section Y [ wk-‚áõ ])
-- vs = {!!}

data _‚ä¢Universe_ where
  ùïå : Œì ‚ä¢Universe ‚àÖ










module Example where

  Tri : Œì ‚ä¢Projected pt ‚àû
  Tri = ‚ä• ‚à† ‚àÖ ‚à† ‚àÖ ‚à† (pt (base ext) ‚à® pt ext)

  Bi : ‚àÄ U -> Œì ‚ä¢Projected U
  Bi _ = ‚ä• ‚à† ‚àÖ ‚à† pt ext

  ff : [] ,[ pt ‚àû ‚Üû Tri ] ‚ä¢Section Bi (var zero)
  ff = split (({!!} ‚Ü¶ {!!}) ‚ü® {!!} ‚ü©·µ£) {!!}

  -- the subspace created from a closed subset (a term / a section)
  -- Lift : {X : Œì ‚ä¢Projected U} -> Œì ‚ä¢Section X -> Œì ‚ä¢Projected U
  -- Lift {X} s = {!!}

  -- Id : Œì ‚ä¢Projected U
  -- Id = ‚à´ {!!} {!!}

  -- Tri : [] ‚ä¢Projected (var ‚àû)
  -- Tri = ‚à´ Id (Id ‚äï' Id)

  -- Bi : [] ‚ä¢Projected _
  -- Bi = ‚à´ ([ ‚àÖ by {!!} ]*) ({![ ? by ? ]*!})

  -- Tri : [] ‚ä¢Projected (var ‚àû)
  -- Tri = Ex $ ‚à´ (‚àÖ *) (‚à´ (‚àÖ *) (var ezero ‚à™ var {!suc ?!} *))


  -- example: map Tri to Bi

  -- Poly : (L : Œì ‚ä¢Projected var ‚àû) -> Œì ‚ä¢Section ‚àÆ {!!} Univ
  -- Poly = {!!}


-- data _‚ä¢_ : ‚àÄ (Œì : Ctx) -> ‚àÄ{U} -> Œì ‚ä¢Type U -> ùí∞‚ÇÄ

-- base : Œì ‚ä¢Type U -> Œì ‚ä¢Space
-- base = {!!}
-}
