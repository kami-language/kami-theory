-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Dev.2024-01-20.Space where

open import Agora.Conventions hiding (Œ£ ; Lift ; k)

open import KamiTheory.Dev.2024-01-20.Core hiding (_Ôº†_)
open import KamiTheory.Dev.2024-01-20.StrictOrder.Base
open import KamiTheory.Dev.2024-01-20.UniqueSortedList
open import KamiTheory.Dev.2024-01-20.StrictOrder.Instances.List
open import KamiTheory.Dev.2024-01-20.Basics
open import KamiTheory.Dev.2024-01-20.Open

open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Data.Sum.Definition
open import Agora.Data.Product.Definition

open import Data.List using (_++_ ; concatMap)


Space = Lattice (‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ)


----------------------------------------------------------
-- Instances for products


-- module _ {A : ùí∞ ùëñ}
--          {{_ : isSetoid {ùëó} A}}
--          {{_ : isPreorder ùëò ‚Ä≤ A ‚Ä≤}}
--          {{_ : hasFiniteJoins ‚Ä≤ A ‚Ä≤}} where
--   instance
--     hasFiniteJoins:Family : ‚àÄ{I : ùí∞ ùëó} -> hasFiniteJoins (‚Ä≤ (I -> A) ‚Ä≤)
--     hasFiniteJoins.‚ä•         hasFiniteJoins:Family = Œª _ -> ‚ä•
--     hasFiniteJoins.initial-‚ä• hasFiniteJoins:Family = Œª _ -> initial-‚ä•
--     hasFiniteJoins._‚à®_       hasFiniteJoins:Family = Œª a b i -> a i ‚à® b i
--     hasFiniteJoins.Œπ‚ÇÄ-‚à®      hasFiniteJoins:Family = Œª a -> Œπ‚ÇÄ-‚à®
--     hasFiniteJoins.Œπ‚ÇÅ-‚à®      hasFiniteJoins:Family = Œª a -> Œπ‚ÇÅ-‚à®
--     hasFiniteJoins.[_,_]-‚à®   hasFiniteJoins:Family = Œª f g a -> [ f a , g a ]-‚à®

-- module _ {A : ùí∞ _} {B : ùí∞ _} {{_ : StrictOrder ùëñ on A}} {{_ : StrictOrder ùëó on B}} where
module _ {A : StrictOrder ùëñ} {B : StrictOrder ùëó} where

  bind-ùí´·∂†‚Å±‚Åø : (‚ü® A ‚ü© -> ùí´·∂†‚Å±‚Åø B) -> ùí´·∂†‚Å±‚Åø A -> ùí´·∂†‚Å±‚Åø B
  bind-ùí´·∂†‚Å±‚Åø f x = concatMap (Œª x -> ‚ü® f x ‚ü©) ‚ü® x ‚ü© since {!!}

  bind-Space : (‚ü® A ‚ü© -> ùí™·∂†‚Å±‚Åø‚Åª ∑·µè (ùí´·∂†‚Å±‚Åø B)) -> (ùí™·∂†‚Å±‚Åø‚Åª ∑·µè (ùí´·∂†‚Å±‚Åø A) -> ùí™·∂†‚Å±‚Åø‚Åª ∑·µè (ùí´·∂†‚Å±‚Åø B))
  bind-Space = {!!}

_√ó-Space_ : Space -> Space -> Space
_√ó-Space_ A B = ‚ü® A ‚ü© √ó ‚ü® B ‚ü©



