
module KamiTheory.Main.Dependent.Typed.RestrictionRelation where

open import Data.Fin using (#_ ; zero ; suc)
open import Data.List using (_‚à∑_ ; [])

open import Agora.Conventions hiding (_‚àô_ ; _‚à∑_ ; k ; const ; _‚à£_)
open import Agora.Order.Preorder
open import Agora.Order.Lattice

open import KamiTheory.Basics
open import KamiTheory.Main.Dependent.Untyped.Definition
open import KamiTheory.Main.Dependent.Untyped.Instances
open import KamiTheory.Main.Dependent.Typed.Definition
-- open import KamiTheory.Main.Dependent.Typed.Instances


open import Data.Nat using (_+_)


module _ {P : ùí∞ ‚Ñì‚ÇÄ} {{_ : isSetoid {‚Ñì‚ÇÄ} P}} {{_ : isPreorder ‚Ñì‚ÇÄ ‚Ä≤ P ‚Ä≤}}
       -- {{_ : isDecidablePreorder ‚Ä≤ P ‚Ä≤}}
       -- {{_ : hasDecidableEquality P}}
       where

  private variable
    -- n m : Nat
    p q : Term P n
    Œì Œì‚ÇÄ Œì‚ÇÅ  : Con (Term P) n
    A B : Term P n
    A‚ÇÄ A‚ÇÅ : Term P n
    a b : Term P n
    X Y : Term P n
    L K : Term P n
    E F : Term P n
    t u s : Term P n
    f g : Term P n
    U V R W W‚ÇÄ W‚ÇÅ : P

  data isNot-ùìÄ-loc : ‚àÄ{bs} -> Kind bs -> Set where
    wrongArity : ‚àÄ{bs} {k : Kind bs} -> ¬¨(bs ‚â° (0 ‚à∑ 0 ‚à∑ [])) -> isNot-ùìÄ-loc k
    wrongKind : ‚àÄ{k : Kind (0 ‚à∑ 0 ‚à∑ [])} -> ¬¨(k ‚â° ùìÄ-loc) -> isNot-ùìÄ-loc k

  ‚ÜØ-isNot-ùìÄ-loc : isNot-ùìÄ-loc (ùìÄ-loc) -> ùüò-ùí∞
  ‚ÜØ-isNot-ùìÄ-loc (wrongArity x) = x refl
  ‚ÜØ-isNot-ùìÄ-loc (wrongKind x) = x refl



  data _[_]‚§á_ {n} : Term P n -> P -> Term P n -> Set
  data _[_]‚§ás_ : ‚àÄ{n bs} -> GenTs (Term P) n bs -> P -> GenTs (Term P) n bs -> Set

  data _[_]‚§ás_ where
    [] : ‚àÄ{n} -> ([] {n = n}) [ W ]‚§ás []
    _‚à∑_ : {n b : ‚Ñï} -> {t u : Term P (b + n)} -> t [ W ]‚§á u
        -> ‚àÄ{bs} -> ‚àÄ{ts us : GenTs (Term P) n bs} -> ts [ W ]‚§ás us
        -> (_‚à∑_ {n = n} {b = b} t ts) [ W ]‚§ás (_‚à∑_ {n = n} {b = b} u us)

  data _[_]‚§á_ {n} where
    var : ‚àÄ v -> var v [ W ]‚§á var v
    const‚Çú : ‚àÄ c -> const‚Çú c [ W ]‚§á const‚Çú c
    gen : ‚àÄ{bs} -> (k : MainKind bs)
        -> ‚àÄ{ts us} -> ts [ W ]‚§ás us
        -> gen (main k) ts [ W ]‚§á gen (main k) us

    gen-loc-keep : ‚àÄ U t -> U ‚â§ W
              -> t [ W ]‚§á u
              -> loc U t [ W ]‚§á loc U u

    gen-loc-remove : ‚àÄ U t -> ¬¨(U ‚â§ W) -> loc U t [ W ]‚§á locskip

  data _[_]‚§áEntry_ {n} : Term P n -> P -> Term P n -> Set where
    _,_ : A [ W ]‚§á B -> p [ W ]‚§á q -> (A / p) [ W ]‚§áEntry B / q

  data _[_]‚§áCtx_ : Con (Term P) n -> P -> Con (Term P) n -> Set where
    Œµ : Œµ [ W ]‚§áCtx Œµ
    _‚àô_ : Œì‚ÇÄ [ W ]‚§áCtx Œì‚ÇÅ -> A‚ÇÄ [ W ]‚§áEntry A‚ÇÅ -> (Œì‚ÇÄ ‚àô A‚ÇÄ) [ W ]‚§áCtx (Œì‚ÇÅ ‚àô A‚ÇÅ)



  -- module _ (_‚àß_ : P -> P -> P) (_‚à®_ : P -> P -> P) where
  --   private variable
  --     bs : List ‚Ñï
  --     -- p q : Term P n
  --     p‚ÇÄ p‚ÇÅ : Term P n
  --     -- Œì‚ÇÄ Œì‚ÇÅ Œì  : Con (Term P) n
  --     -- E‚ÇÄ E‚ÇÅ E  : Term P n
  --     -- a b : Term P n
  --     -- X Y : Term P n
  --     -- t s : Term P n
  --     -- U V R W W‚ÇÄ W‚ÇÅ : P

  --   glue-GenTs : ‚àÄ{t‚ÇÄ t‚ÇÅ u : GenTs (Term P) n bs}
  --             -> t‚ÇÄ [ W ]‚§ás u -> t‚ÇÅ [ W ]‚§ás u -> GenTs (Term P) n bs
  --   glue : ‚àÄ{t‚ÇÄ t‚ÇÅ u : Term P n}
  --             -> t‚ÇÄ [ W ]‚§á u -> t‚ÇÅ [ W ]‚§á u -> Term P n

  --   glue-GenTs [] [] = []
  --   glue-GenTs (t ‚à∑ ts) (u ‚à∑ us) = glue t u ‚à∑ glue-GenTs ts us

  --   glue (var v) (var .v) = var v
  --   glue (const‚Çú c) (const‚Çú .c) = const‚Çú c
  --   glue (gen k ts) (gen .k us) = gen (main k) (glue-GenTs ts us)
  --   glue (gen k ts) (gen-loc-remove U t x‚ÇÇ) = loc U t
  --   glue (gen-loc-keep U t œï Œ±) (gen-loc-keep .U s œà Œ≤) = loc U (glue Œ± Œ≤)
  --   glue (gen-loc-remove U t ¬¨œï) (gen k x‚ÇÇ) = loc U t
  --   glue (gen-loc-remove U t ¬¨œï) (gen-loc-remove V s ¬¨œà) = loc U t -- This case should be impossible for well-typed terms... Here we just take the term of one side


  --   glue-Con : ‚àÄ{Œì‚ÇÄ Œì‚ÇÅ Œì : Con (Term P) n}
  --             -> Œì‚ÇÄ [ W ]‚§áCtx Œì -> Œì‚ÇÅ [ W ]‚§áCtx Œì -> Con (Term P) n
  --   glue-Con Œµ Œµ = Œµ
  --   glue-Con (Œ± ‚àô (Œ±A , Œ±p)) (Œ≤ ‚àô (Œ≤A , Œ≤p)) = glue-Con Œ± Œ≤ ‚àô (glue Œ±A Œ≤A / glue Œ±p Œ≤p)


  --   glue-Ctx : W‚ÇÄ ‚ä¢Ctx Œì‚ÇÄ -> W‚ÇÅ ‚ä¢Ctx Œì‚ÇÅ -> (Œ± : Œì‚ÇÄ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§áCtx Œì) -> (Œ≤ : Œì‚ÇÅ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§áCtx Œì) -> (W‚ÇÄ ‚à® W‚ÇÅ) ‚ä¢Ctx (glue-Con Œ± Œ≤)

  --   glue-Entry : {A‚ÇÄ A‚ÇÅ A p‚ÇÄ p‚ÇÅ p : Term P n}
  --             -> W‚ÇÄ ‚à£ Œì‚ÇÄ ‚ä¢Entry (A‚ÇÄ / p‚ÇÄ) -> W‚ÇÅ ‚à£ Œì‚ÇÅ ‚ä¢Entry (A‚ÇÅ / p‚ÇÅ)
  --             -> (Œ±Œì : Œì‚ÇÄ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§áCtx Œì)
  --             -> (Œ≤Œì : Œì‚ÇÅ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§áCtx Œì)
  --             -> (Œ±A : A‚ÇÄ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§á A)
  --             -> (Œ≤A : A‚ÇÅ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§á A)
  --             -> (Œ±p : p‚ÇÄ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§á p)
  --             -> (Œ≤p : p‚ÇÅ [ W‚ÇÄ ‚àß W‚ÇÅ ]‚§á p)
  --             -> (W‚ÇÄ ‚à® W‚ÇÅ) ‚à£ glue-Con Œ±Œì Œ≤Œì ‚ä¢Entry (glue Œ±A Œ≤A / glue Œ±p Œ≤p)

  --   glue-Ctx Œµ Œµ Œµ Œµ = Œµ
  --   glue-Ctx (Œì‚ÇÄP ‚àô E‚ÇÄP) (Œì‚ÇÅP ‚àô E‚ÇÅP) (Œ± ‚àô (Œ±A , Œ±p)) (Œ≤ ‚àô (Œ≤A , Œ≤p)) = glue-Ctx Œì‚ÇÄP Œì‚ÇÅP Œ± Œ≤ ‚àô glue-Entry E‚ÇÄP E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p

  --   glue-Entry (UU‚±º {{ŒìP = because ŒìP‚ÇÄ}}) (UU‚±º {{ŒìP = because ŒìP‚ÇÅ}}) Œ± Œ≤ (gen .Ukind []) (gen .Ukind []) (const‚Çú .(mlmod (Local _))) (const‚Çú .(mlmod (Local _))) = UU‚±º {{ŒìP = because (glue-Ctx ŒìP‚ÇÄ ŒìP‚ÇÅ Œ± Œ≤)}}
  --   glue-Entry NN‚±º E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Vec‚±º E‚ÇÄP x) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry Empty‚±º E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry Unit‚±º E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Œ†‚±º E‚ÇÄP ‚ñπ E‚ÇÄP‚ÇÅ) E‚ÇÅP Œ± Œ≤ (gen .Pikind (x ‚à∑ ())) (gen .Pikind x‚ÇÅ) Œ±p Œ≤p
  --   glue-Entry (Œ£‚±º E‚ÇÄP ‚ñπ E‚ÇÄP‚ÇÅ) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Univ-Com‚±º x) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Loc‚±º U E‚ÇÄP) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Com‚±º E‚ÇÄP) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (End‚±º E‚ÇÄP) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (E‚ÇÄP ‚â´‚±º E‚ÇÄP‚ÇÅ) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}
  --   glue-Entry (Share‚±º U V œï E‚ÇÄP) E‚ÇÅP Œ± Œ≤ Œ±A Œ≤A Œ±p Œ≤p = {!!}

