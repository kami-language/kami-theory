
{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Other.TestLambda where

open import Agora.Conventions hiding (Œ£)
open import Agora.Data.Power.Definition
open import Data.Fin
open import Data.Nat hiding (_!)
open import KamiTheory.Dev.2023-11-27.Core


data Type : ùí∞‚ÇÄ where
  BB : Type
  _‚áí_ : Type -> Type -> Type

infixr 50 _‚áí_

data Ctx : ùí∞‚ÇÄ where
  [] : Ctx
  _,,_ : Ctx -> Type -> Ctx

infixl 40 _,,_

private variable
  Œì : Ctx
  A B X Y : Type

data _‚ä¢Var_ : Ctx -> Type -> ùí∞‚ÇÄ where
  zero : Œì ,, A ‚ä¢Var A
  suc : Œì ‚ä¢Var B -> Œì ,, A ‚ä¢Var B

data _‚ä¢_ : Ctx -> Type -> ùí∞‚ÇÄ where
  app : Œì ‚ä¢ A ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B
  lam : Œì ,, A ‚ä¢ B -> Œì ‚ä¢ A ‚áí B
  var : Œì ‚ä¢Var A -> Œì ‚ä¢ A
  true : Œì ‚ä¢ BB
  false : Œì ‚ä¢ BB
  elim-BB : Œì ‚ä¢ A -> Œì ‚ä¢ A -> Œì ,, BB ‚ä¢ A

elim-Bool : ‚àÄ{A : ùí∞‚ÇÄ} -> A -> A -> Bool -> A
elim-Bool x y false = x
elim-Bool x y true = y

‚ü¶_‚üß-Type : Type -> ùí∞‚ÇÄ
‚ü¶ BB ‚üß-Type = Bool
‚ü¶ A ‚áí B ‚üß-Type = ‚ü¶ A ‚üß-Type -> ‚ü¶ B ‚üß-Type

‚ü¶_‚üß-Ctx : Ctx -> ùí∞‚ÇÄ
‚ü¶ [] ‚üß-Ctx = ùüô-ùí∞
‚ü¶ Œì ,, A  ‚üß-Ctx = ‚ü¶ Œì ‚üß-Ctx √ó-ùí∞ ‚ü¶ A ‚üß-Type

‚ü¶_‚üß-Var : Œì ‚ä¢Var A -> ‚ü¶ Œì ‚üß-Ctx -> ‚ü¶ A ‚üß-Type
‚ü¶ zero ‚üß-Var (Œì , A) = A
‚ü¶ suc v ‚üß-Var (Œì , A) = ‚ü¶ v ‚üß-Var Œì

‚ü¶_‚üß : Œì ‚ä¢ A -> ‚ü¶ Œì ‚üß-Ctx -> ‚ü¶ A ‚üß-Type
‚ü¶ app t s ‚üß Œì = (‚ü¶ t ‚üß Œì) (‚ü¶ s ‚üß Œì)
‚ü¶ lam t ‚üß Œì = Œª a -> ‚ü¶ t ‚üß (Œì , a)
‚ü¶ var x ‚üß Œì = ‚ü¶ x ‚üß-Var Œì
‚ü¶ true ‚üß x = true
‚ü¶ false ‚üß x = false
‚ü¶ elim-BB t s ‚üß (Œì , b) = elim-Bool (‚ü¶ t ‚üß Œì) (‚ü¶ s ‚üß Œì) b

letin : Œì ‚ä¢ A -> Œì ,, A ‚ä¢ B -> Œì ‚ä¢ B
letin x y = app (lam y) x

merge-Arr : (Œì ‚ä¢ A -> Œì ‚ä¢ B) -> Œì ,, A ‚ä¢ B
merge-Arr {A = BB} = {!!}
merge-Arr {A = A ‚áí A‚ÇÅ} = {!!}

elim-Arr : (Œì ‚ä¢ X ‚áí Y -> Œì ‚ä¢ A) -> Œì ,, X ‚áí Y ‚ä¢ A
elim-Arr {Œì = Œì} {Y = BB} f = {!!}
elim-Arr {Œì = Œì} {Y = Y ‚áí Y‚ÇÅ} f = {!!}

rei-Bool : Bool -> [] ‚ä¢ BB
rei-Bool false = false
rei-Bool true = true

rei : ‚àÄ{Œì A} -> (‚ü¶ Œì ‚üß-Ctx -> ‚ü¶ A ‚üß-Type) -> Œì ‚ä¢ A

rei-Type : ‚ü¶ A ‚üß-Type -> [] ‚ä¢ A
rei-Type {A = BB} x = rei-Bool x
rei-Type {A = A ‚áí A‚ÇÅ} x = {!rei (x , tt)!}

rei {Œì = []} f = rei-Type (f tt)
rei {Œì = Œì ,, BB} f = elim-BB (rei (Œª Œì -> f (Œì , false))) (rei (Œª Œì -> f (Œì , true)))
rei {Œì = Œì ,, X ‚áí Y} f = {!letin ? ?!}
-- elim-Arr Œª t -> rei (Œª Œì -> f (Œì , ‚ü¶ t ‚üß Œì))

-- rei {A = NN} f = {!!}
-- rei {A = A ‚áí A‚ÇÅ} f = {!!}

-- normalize : Œì ‚ä¢ A -> Œì ‚ä¢ A
-- normalize = {!!}

-- good-normalize : ‚àÄ (t : Œì ‚ä¢ A) -> ‚ü¶ t ‚üß ‚â£ ‚ü¶ normalize t ‚üß
-- good-normalize = {!!}



