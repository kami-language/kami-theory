
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Main.Generic.ModeSystem.2Cell.Decidability where

open import Agora.Conventions
open import KamiTheory.Basics
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition


import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition as D


module 2CellDecidability (G : 2Graph ùëñ) where
  open D.2CellDefinition G

  private variable
    a b c d e f : 0Cell G
    Œº : 1Cell G a b
    Œº‚ÇÄ : 1Cell G c d
    Œº‚ÇÅ : 1Cell G e f
    Œ∑ : 1Cell G b c
    œâ : 1Cell G c d
    Œ∑‚ÇÄ Œ∑‚ÇÅ : 1Cell G b c
    œÑ‚ÇÄ œÑ‚ÇÅ : 1Cell G e f
    Œæ‚ÇÄ Œæ‚ÇÅ : 1Cell G e f
    v : Visibility

  decide-‚â°-FreeParts : (x y : FreeParts a b) ‚Üí isDecidable (x ‚â° y)
  decide-‚â°-FreeParts [ œï ] [ œï‚ÇÅ ] with œï ‚âü œï‚ÇÅ
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl = yes refl
  decide-‚â°-FreeParts [ œï ] (œï‚ÇÅ ‚à∑ y) = no Œª ()
  decide-‚â°-FreeParts (œï ‚à∑ x) [ œï‚ÇÅ ] = no Œª ()
  decide-‚â°-FreeParts (_‚à∑_ {b = b} {c = c} œï x) (_‚à∑_ {b = b‚ÇÅ} {c = c‚ÇÅ} œï‚ÇÅ y) with b ‚âü b‚ÇÅ
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl with c ‚âü c‚ÇÅ
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl with œï ‚âü œï‚ÇÅ
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl with decide-‚â°-FreeParts x y
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl = yes refl

  instance
    hasDecidableEquality:FreeParts : hasDecidableEquality (FreeParts a b)
    hasDecidableEquality:FreeParts = record { _‚âü_ = decide-‚â°-FreeParts }

  decide-‚â°-Partition : ‚àÄ{œïs} -> (x y : Partition n œïs Œº) ‚Üí isDecidable (x ‚â° y)
  decide-‚â°-Partition (_ ‚åü) (_ ‚åü) = yes refl
  decide-‚â°-Partition (_‚åü[_]‚åû_ Œº œÑ {Œ∑ = Œ∑} x) y = {!!}

  instance
    hasDecidableEquality:Partition : ‚àÄ{œïs} -> hasDecidableEquality (Partition n œïs Œº)
    hasDecidableEquality:Partition = record { _‚âü_ = {!!} }

  decide-‚â°-2CellGen : {v : Visibility}
                   ->{a b : 0Cell G} {œïs : FreeParts a b} {Œº Œ∑ : 1Cell G a b}
                   -> {Œºp : Partition n œïs Œº}
                   -> {Œ∑p : Partition n œïs Œ∑}
                   -> (Œæ Œ∂ : 2CellGen v œïs Œºp Œ∑p) -> isDecidable (Œæ ‚â° Œ∂)
  decide-‚â°-2CellGen = {!!}


    -- field {size} : ‚Ñï
    -- field {freeParts} : FreeParts a b
    -- field {domPartition} : Partition size freeParts Œº
    -- field {codPartition} : Partition size freeParts Œ∑

  decide-‚â°-Some2CellGen : (x y : Some2CellGen v Œº Œ∑) ‚Üí isDecidable (x ‚â° y)
  decide-‚â°-Some2CellGen x y with size x ‚âü size y
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl with freeParts x ‚âü freeParts y
  ... | no p = no Œª {refl -> p refl}
  ... | yes refl = {!!} -- with x ‚âü freeParts y

  instance
    hasDecidableEquality:Some2CellGen : hasDecidableEquality (Some2CellGen v Œº Œ∑)
    hasDecidableEquality:Some2CellGen = record { _‚âü_ = decide-‚â°-Some2CellGen }

  decide-‚â°-2Cell : (x y : 2Cell v Œº Œ∑) ‚Üí isDecidable (x ‚â° y)
  decide-‚â°-2Cell [] [] = yes refl
  decide-‚â°-2Cell [] (x ‚à∑ y) = no Œª ()
  decide-‚â°-2Cell (x ‚à∑ x‚ÇÅ) [] = no Œª ()
  decide-‚â°-2Cell (x ‚à∑ x‚ÇÅ) (x‚ÇÇ ‚à∑ y) = {!!}

  instance
    hasDecidableEquality:2Cell : hasDecidableEquality (2Cell v Œº Œ∑)
    hasDecidableEquality:2Cell = record { _‚âü_ = {!!} }




