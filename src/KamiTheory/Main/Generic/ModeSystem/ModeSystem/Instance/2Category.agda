-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category where

open import Agora.Conventions hiding (_‚à£_)
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import Agora.Category.Std.Morphism.Iso.Definition
open import KamiTheory.Basics
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition
  renaming ( id to id'
           ; _‚óÜ_ to _‚óÜ'_
           )

import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition as 2CellDefinition
import KamiTheory.Main.Generic.ModeSystem.2Cell.Rewriting as 2CellRewriting
import KamiTheory.Main.Generic.ModeSystem.2Cell.Commutation as 2CellCommutation
import KamiTheory.Main.Generic.ModeSystem.2Cell.Decidability as 2CellDecidability
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition


module _ (ùìÇ : ModeSystem ùëñ) where
  private variable
    a b c : Mode ùìÇ
    Œº ŒΩ Œ∑ œâ : ModeHom ùìÇ a b

  open 2CellDefinition.2CellDefinition (graph ùìÇ)
  open 2CellDecidability.2CellDecidability (graph ùìÇ)

  instance
    isCategoryData:ModeTrans* : isCategoryData (ModeHom ùìÇ a b) (ModeTrans* ùìÇ all)
    isCategoryData:ModeTrans* = record
                                { isSetoid:Hom = isSetoid:byId
                                ; id = [ incl [] ‚à£ incl [] ]
                                ; _‚óÜ_ = {!!}
                                ; unit-l-‚óÜ = {!!}
                                ; unit-r-‚óÜ = {!!}
                                ; unit-2-‚óÜ = {!!}
                                ; assoc-l-‚óÜ = {!!}
                                ; assoc-r-‚óÜ = {!!}
                                ; _‚óà_ = {!!}
                                }


  instance
    isCategoryData:Path : isCategoryData (Mode ùìÇ) (ModeHom ùìÇ)
    isCategoryData:Path = record
                          { isSetoid:Hom = isSetoid:byCategoryData
                          ; id = id'
                          ; _‚óÜ_ = _‚óÜ'_
                          ; unit-l-‚óÜ = {!!}
                          ; unit-r-‚óÜ = {!!}
                          ; unit-2-‚óÜ = {!!}
                          ; assoc-l-‚óÜ = {!!}
                          ; assoc-r-‚óÜ = {!!}
                          ; _‚óà_ = {!!}
                          }

  isCategory:byModeSystem : isCategory (Mode ùìÇ)
  isCategory:byModeSystem = record { Hom = ModeHom ùìÇ }

  private instance
    _ = isCategory:byModeSystem



  is2Category:byModeSystem : is2Category (Mode ùìÇ since it)
  is2Category:byModeSystem = record
    { 2Hom = ModeTrans* ùìÇ all
    ; 2HomData = it
    ; isFunctor:Comp = {!!}
    ; isFunctor:Id = {!!}
    ; 2celliso = Œª x -> ‚ü® x ‚ü©
    }


