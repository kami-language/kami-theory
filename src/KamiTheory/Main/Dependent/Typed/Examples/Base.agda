
----------------------------------------------------------
--
-- Example terms in the Kami language, Base
--
-- In this file we setup the Kami language itself,
-- by instantiating MTT with our SRN mode theory,
-- itself instantiated to a topology of 3 processes with
-- common knowledge.
--
-- We introduce various abbreviations to make terms more
-- readable, and show that one direction of the "Axiom K
-- equivalence" is derivable.
--
----------------------------------------------------------



{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Main.Dependent.Typed.Examples.Base where

open import Data.Fin using (#_ ; zero ; suc ; Fin)
open import Data.List using (_‚à∑_ ; [])
open import Data.Vec using ([] ; _‚à∑_ ; _++_) renaming (Vec to StdVec)

open import Agora.Conventions hiding (_‚àô_ ; _‚à∑_ ; k ; const ; _‚à£_)
open import Agora.Order.Preorder
open import Agora.Setoid.Definition

open import KamiTheory.Basics hiding (typed)
open import KamiTheory.Order.Preorder.Instances
open import KamiTheory.Main.Dependent.Untyped.Definition
open import KamiTheory.Main.Dependent.Untyped.Instances
open import KamiTheory.Main.Dependent.Typed.Definition
open import KamiTheory.Main.Dependent.Typed.Instances


open import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Example
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding ([_])
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Example
open import KamiTheory.Main.Generic.ModeSystem.Modality
open import KamiTheory.Main.Generic.ModeSystem.Transition





module ExamplesBase where


  -------------------
  -- The preorder of 3 processes with common knowledge is
  -- the standard preorder on `Fin 3 ‚Üí Bool`, which inherits
  -- the structure from `Bool` itself. We encode such functions
  -- as bool-vectors of length 3. Note that while we actually
  -- have to take the opposite preorder of that, we do so implicitly
  -- by defining our singleton lists to be inverted, i.e., everywhere
  -- true except at the required position.
  PP : Preorder _
  PP = ‚Ä≤ StdVec ùüö 3 ‚Ä≤

  -- Singletons are vectors with `true` everywhere except the required
  -- position
  singleton : Fin 3 -> ‚ü® PP ‚ü©
  singleton i = singletonVec true false i

  -- We postulate that the relation is merely a proposition.
  postulate instance
    _ : ‚àÄ{a b : ‚ü® PP ‚ü©} -> isProp (a ‚â§ b)

  -------------------
  -- Various shorter notations
  P : ùí∞ _
  P = ‚ü® PP ‚ü©

  -- We call the three processes `uu`, `vv` and `ww`
  uu vv ww : P
  uu = singleton (# 0)
  vv = singleton (# 1)
  ww = singleton (# 2)

  -- this is the common knowledge of both `uu` and `vv`
  uuvv : P
  uuvv = false ‚à∑ (false ‚à∑ (true ‚à∑ []))

  pattern UVP = false ‚à∑ false ‚à∑ true ‚à∑ []
  pattern UP = false ‚à∑ true ‚à∑ true ‚à∑ []
  pattern VP = true ‚à∑ false ‚à∑ true ‚à∑ []

  -------------------
  -- Instantiating the SRN modesystem with the PP preorder
  M : ModeSystem _
  M = SendReceiveNarrow-ModeSystem.SRN-ModeSystem PP {{it}} {{it}}

  open Judgements M public
  open Typecheck M public
  open SendReceiveNarrow-2Graph public
  open 2CellDefinition (graph M) hiding ( [_]) public


  -------------------
  -- Give names to variables, instead of writing lots of "suc"s
  --
  -- We need different versions for terms and for judgements.
  -- And we also have a special notation for variables where the
  -- mode transformation is the identity.

  pattern x0 = var zero (incl idT)
  pattern x1 = var (suc zero) (incl idT)
  pattern x2 = var (suc (suc zero)) (incl idT)
  pattern x3 = var (suc (suc (suc zero))) (incl idT)
  pattern x4 = var (suc (suc (suc (suc zero)))) (incl idT)
  pattern x0[_] Œæ = var zero (incl (_ ‚áí _ ‚àã Œæ))
  pattern x1[_] Œæ = var (suc zero) (incl (_ ‚áí _ ‚àã Œæ))
  pattern x2[_] Œæ = var (suc (suc zero)) (incl (_ ‚áí _ ‚àã Œæ))
  pattern x3[_] Œæ = var (suc (suc (suc zero))) (incl (_ ‚áí _ ‚àã Œæ))

  pattern x0‚±º = var zero idT‚±º
  pattern x1‚±º = var (suc zero) idT‚±º
  pattern x2‚±º = var (suc (suc zero)) idT‚±º
  pattern x3‚±º = var (suc (suc (suc zero))) idT‚±º
  pattern x4‚±º = var (suc (suc (suc (suc zero)))) idT‚±º
  pattern x5‚±º = var (suc (suc (suc (suc (suc zero))))) idT‚±º
  pattern x6‚±º = var (suc (suc (suc (suc (suc (suc zero)))))) idT‚±º
  pattern x7‚±º = var (suc (suc (suc (suc (suc (suc (suc zero))))))) idT‚±º

  pattern x0[_]‚±º Œæ = var zero Œæ
  pattern x1[_]‚±º Œæ = var (suc zero) Œæ
  pattern x2[_]‚±º Œæ = var (suc (suc zero)) Œæ
  pattern x3[_]‚±º Œæ = var (suc (suc (suc zero))) Œæ
  pattern x4[_]‚±º Œæ = var (suc (suc (suc (suc zero)))) Œæ

  pattern x0‚±º' P = var {{P}} zero idT‚±º
  pattern x1‚±º' P = var {{P}} (suc zero) idT‚±º
  pattern x2‚±º' P = var {{P}} (suc (suc zero)) idT‚±º
  pattern x3‚±º' P = var {{P}} (suc (suc (suc zero))) idT‚±º


  variable
    p q : Term M n
    s t u : Term M n
    Œì  : Con (Entry M) n
    A C : Term M n
    B : Term M m
    U V W R : P
    k l o r : Mode M
    Œº : ModeHom M k l
    Œ∑ : ModeHom M o r
    ŒΩ : ModeHom M o r
    Œºs : Restriction k n

  -- Reversing the order of arguments for term judgements
  _‚ä¢_‚âî_ : (Œì : Con (Entry M) n) ‚Üí Target n ‚Üí Term M n ‚Üí Set
  Œì ‚ä¢ E ‚âî t = Œì ‚ä¢ t ‚à∂ E

  -- The empty context gets a special name
  ŒµŒµ : Con (Entry M) zero
  ŒµŒµ = Œµ

  -- the identity mode hom
  idM : (a : Mode M) -> ModeHom M a a
  idM a = id

  -- patterns for our modalities
  pattern Ôº† u = `Ôº†` u ‚®æ id
  pattern ‚óª = `[]` ‚®æ id



  ---------------------------------------------
  -- small examples

  P0 : ŒµŒµ ‚àô (NN / (Ôº† uu)) ‚ä¢ _ ‚à∂ NN ‚à• ((Ôº† uu) ‚à∑ [])
  P0 = var zero idT‚±º


  C0 : ‚ä¢Ctx (ŒµŒµ ‚àô (NN / (Ôº† uu))) ‚à• (Ôº† uu ‚à∑ [])
  C0 = Œµ ‚àô NN‚±º {{because Œµ}}


  P1 : ŒµŒµ ‚ä¢ ‚ü® NN ‚à£ Ôº† uu ‚ü© /‚ñπ‚ñπ ‚ü® NN ‚à£ Ôº† uu ‚ü© ‚à• []
       ‚âî lam‚Ü¶ letunmod x0 into ‚ü® NN ‚à£ Ôº† uu ‚ü© by mod[ Ôº† uu ] x0
  P1 = lam‚±º (Modal‚±º (NN‚±º)) ‚Ü¶ (letunmod‚±º[ id ] (var zero idT‚±º) into (Modal‚±º (NN‚±º)) by (mod‚±º ((var zero idT‚±º))))


  postulate
    wk-Type : Œì ‚ä¢Type A ‚à• Œºs -> Œì ‚àô (B / Œ∑) ‚ä¢Type wk1 A ‚à• (id ‚à∑ Œºs)
    wk-Term : Œì ‚ä¢ t ‚à∂ A ‚à• Œºs -> Œì ‚àô (B / Œ∑) ‚ä¢ wk1 t ‚à∂ wk1 A ‚à• (id ‚à∑ Œºs)



  _√ó√ó‚±º_  : {M : Restriction k _}
          ‚Üí Œì ‚ä¢Type (A ‚à• M)
          ‚Üí Œì ‚ä¢Type (B ‚à• M)
          ‚Üí Œì ‚ä¢Type ((Œ£ A // incl (k ‚Üù k ‚àã id) ‚ñπ wk1 B) ‚à• M)
  _√ó√ó‚±º_ Ap Bp = Œ£‚±º Ap ‚ñπ wk-Type Bp


  ---------------------------------------------
  -- We show that arbitrary modal types commute with products (Axiom K).
  --
  AxiomK : Œµ ‚ä¢ Œ† UU / Œº ‚ñπ Œ† UU / Œº ‚ñπ ‚ü® x1 √ó√ó x0 ‚à£ Œº ‚ü© /‚ñπ‚ñπ ‚ü® x1 ‚à£ Œº ‚ü© √ó√ó ‚ü® x0 ‚à£ Œº ‚ü© ‚à• []
           ‚âî (lam‚Ü¶ lam‚Ü¶ lam‚Ü¶ letunmod x0 into _ by (mod[ Œº ] (fst‚Çú x0) ,, mod[ Œº ] (snd‚Çú x0)))
  AxiomK {Œº = Œº} = lam‚±º UU‚±º ‚Ü¶
                   lam‚±º UU‚±º ‚Ü¶
                   lam‚±º Modal‚±º (Univ‚±º x1‚±º √ó√ó‚±º Univ‚±º x0‚±º) ‚Ü¶
                   letunmod‚±º x0‚±º
                     into Modal‚±º (Univ‚±º x3‚±º) √ó√ó‚±º Modal‚±º (Univ‚±º x2‚±º)
                     by
                   intro‚±ºŒ£ Modal‚±º (Univ‚±º x3‚±º) ‚ñπ Modal‚±º (Univ‚±º x3‚±º)
                     by
                   mod‚±º (fst‚±º x0‚±º) , mod‚±º (snd‚±º x0‚±º)


