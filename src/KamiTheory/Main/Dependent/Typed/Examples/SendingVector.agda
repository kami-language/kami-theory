
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Main.Dependent.Typed.Examples.SendingVector where

open import Data.Fin using (#_ ; zero ; suc ; Fin)
open import Data.List using (_Рѕи_ ; [])
open import Data.Vec using ([] ; _Рѕи_ ; _++_) renaming (Vec to StdVec)

open import Agora.Conventions hiding (_РѕЎ_ ; _Рѕи_ ; k ; const ; _РѕБ_)
open import Agora.Order.Preorder
open import Agora.Setoid.Definition
-- open import Agora.Order.Lattice
-- open import Agora.Data.Normal.Definition
-- open import Agora.Data.Normal.Instance.Setoid
-- open import Agora.Data.Normal.Instance.Preorder
-- open import Agora.Data.Normal.Instance.Lattice
-- open import Agora.Data.Normal.Instance.DecidableEquality

open import KamiTheory.Basics hiding (typed)
open import KamiTheory.Order.Preorder.Instances
open import KamiTheory.Main.Dependent.Untyped.Definition
open import KamiTheory.Main.Dependent.Untyped.Instances
open import KamiTheory.Main.Dependent.Typed.Definition
open import KamiTheory.Main.Dependent.Typed.Instances


open import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Example
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding ([_])
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Example
open import KamiTheory.Main.Generic.ModeSystem.Modality
open import KamiTheory.Main.Generic.ModeSystem.Transition


open import KamiTheory.Main.Dependent.Typed.Examples.CrispInduction

module Examples2 where
  open Examples



  ---------------------------------------------
  -- For sending vectors we need the narrowing
  -- transformation:

  ¤ёрхѕ╦б : Рѕђ{u v} -> u РЅц v -> ModalityTrans M all (Рќ▓ РєЮ РЌ» РѕІ №╝а u) (Рќ▓ РєЮ РЌ» РѕІ №╝а v)
  ¤ёрхѕ╦б {u = u} ¤Ћ = _ РЄњ _ РѕІ [ (incl (incl (id РїЪ[ narrow ¤Ћ ]Рїъ id РїЪ) Рѕи [])) РѕБ incl [] ]

{-
  _РўЁ¤ёрхѕ╦б[_]РўЁ_ : (╬╝ : ModeHom M k Рќ▓) -> Рѕђ{u v} -> (¤Ћ : u РЅц v) -> (╬и : ModeHom M РЌ» l) -> ModalityTrans M all (k РєЮ l РѕІ (╬╝ РЌє №╝а u РЌє ╬и)) (k РєЮ l РѕІ (╬╝ РЌє №╝а v РЌє ╬и))
  _РўЁ¤ёрхѕ╦б[_]РўЁ_ ╬╝ ¤Ћ ╬и = _ РЄњ _ РѕІ [ (incl (incl (╬╝ РїЪ[ narrow ¤Ћ ]Рїъ ╬и РїЪ) Рѕи [])) РѕБ incl [] ]

  ¤Ћu : uuvv РЅц uu
  ¤Ћu = refl-РЅц-­ЮЪџ Рѕи (step Рѕи (refl-РЅц-­ЮЪџ Рѕи []))

  ¤Ћv : uuvv РЅц vv
  ¤Ћv = step Рѕи (refl-РЅц-­ЮЪџ Рѕи (refl-РЅц-­ЮЪџ Рѕи []))

  send-vec : ╬х╬х
    Ріб
      ╬а NN / №╝а uuvv Рќ╣
      ╬а Vec BB (x0[ ¤ёрхѕ╦б ¤Ћu ]) / №╝а uu Рќ╣
      РЪе Vec BB (x1[ ¤ёрхѕ╦б ¤Ћv ]) РѕБ №╝а vv РЪЕ / id
      РЅћ {!!}
  send-vec =
    lamР▒╝ NNР▒╝ Рєд
    conv (transРѓЉ ({!╬а-cong ? ? ?!}) (univ (╬▓-red (NNР▒╝) ((╬аР▒╝ VecР▒╝ BBР▒╝ x0[ (id) РўЁ¤ёрхѕ╦б[ ¤Ћu ]РўЁ {!!} ]Р▒╝  Рќ╣ ModalР▒╝ (VecР▒╝ BBР▒╝ (var (suc zero) {!!})))) x0Р▒╝)))
      ((wk-Term natrec-crisp)
      РѕўР▒╝ x0Р▒╝
      РѕўР▒╝ (lamР▒╝ NNР▒╝ Рєд (╬аР▒╝_Рќ╣_ {╬╝ = №╝а uu} (VecР▒╝ BBР▒╝ x0[ id РўЁ¤ёрхѕ╦б[ ¤Ћu ]РўЁ (РЌ╗ РЌє №╝а uuvv) ]Р▒╝) (ModalР▒╝ {╬и = №╝а vv} (VecР▒╝ BBР▒╝ x1[ {!!} ]Р▒╝))))
      -- РѕўР▒╝ (lamР▒╝ NNР▒╝ Рєд (╬аР▒╝ VecР▒╝ BBР▒╝ ? x0[ id РўЁ¤ёрхѕ╦б[ ¤Ћu ]РўЁ (РЌ╗ РЌє №╝а uuvv) ]Р▒╝ Рќ╣ ModalР▒╝ (VecР▒╝ BBР▒╝ x1[ id РўЁ¤ёрхѕ╦б[ ¤Ћv ]РўЁ (РЌ╗ РЌє №╝а uuvv) ]Р▒╝)))
      РѕўР▒╝ {!lamР▒╝ ? Рєд ?!}
      РѕўР▒╝ {!!})
      -}
