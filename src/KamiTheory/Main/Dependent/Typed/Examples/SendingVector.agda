
----------------------------------------------------------
--
-- Example terms in the Kami language, sending a vector
--
-- In this file we build the main example, where a vector
-- is sent from process `uu` to `vv`. The length of the
-- vector is common knowledge between these processes,
-- thus located at "uu ‚àß vv". This is required for the induction
-- to go through. The induction itself is the crisp-induction
-- for naturals derived in the previous example.
--
----------------------------------------------------------
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiTheory.Main.Dependent.Typed.Examples.SendingVector where

open import Data.Fin using (#_ ; zero ; suc ; Fin)
open import Data.List using (_‚à∑_ ; [])
open import Data.Vec using ([] ; _‚à∑_ ; _++_) renaming (Vec to StdVec)

open import Agora.Conventions hiding (_‚àô_ ; _‚à∑_ ; k ; const ; _‚à£_)
open import Agora.Order.Preorder
open import Agora.Setoid.Definition

open import KamiTheory.Basics hiding (typed)
open import KamiTheory.Order.Preorder.Instances
open import KamiTheory.Main.Dependent.Untyped.Definition
open import KamiTheory.Main.Dependent.Untyped.Instances
open import KamiTheory.Main.Dependent.Typed.Definition
open import KamiTheory.Main.Dependent.Typed.Instances


open import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Example
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding ([_])
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Example
open import KamiTheory.Main.Generic.ModeSystem.Modality
open import KamiTheory.Main.Generic.ModeSystem.Transition


open import KamiTheory.Main.Dependent.Typed.Examples.Base
open import KamiTheory.Main.Dependent.Typed.Examples.CrispInduction

module ExamplesSendingVector where
  open ExamplesBase
  open ExamplesCrispInduction


  ---------------------------------------------
  -- In order for the common knowledge at "uu ‚àß vv"
  -- to be usable for both processes `uu` and `vv`,
  -- we need the narrowing transformation.
  --
  -- We call it œÑ·µàÀ¢ here. Generically, `œÑ·µàÀ¢ œï` is a transformation
  -- between states at `u` and `v` if `u ‚â§ v` is a smaller element.


  -- The narrowing transformation
  œÑ·µàÀ¢ : ‚àÄ{u v} -> u ‚â§ v -> ModeTrans* M all (Ôº† u) (Ôº† v)
  œÑ·µàÀ¢ {u = u} œï = [ (incl (incl (id ‚åü[ narrow œï ]‚åû id ‚åü) ‚à∑ [])) ‚à£ incl [] ]

  -- The narrowing transformation with additional identities whiskered-on left and right
  _‚òÖœÑ·µàÀ¢[_]‚òÖ_ : (Œº : ModeHom M k ‚ñ≤) -> ‚àÄ{u v} -> (œï : u ‚â§ v) -> (Œ∑ : ModeHom M ‚óØ l) -> ModeTrans* M all ((Œº ‚óÜ Ôº† u ‚óÜ Œ∑)) ((Œº ‚óÜ Ôº† v ‚óÜ Œ∑))
  _‚òÖœÑ·µàÀ¢[_]‚òÖ_ Œº œï Œ∑ = [ (incl (incl (Œº ‚åü[ narrow œï ]‚åû Œ∑ ‚åü) ‚à∑ [])) ‚à£ incl [] ]

  -- Of course the common location `uu ‚àß vv` is smaller than both `uu`
  -- and `vv` which means that we can narrow.
  --
  œïu : uuvv ‚â§ uu
  œïu = refl-‚â§-ùüö ‚à∑ (step ‚à∑ (refl-‚â§-ùüö ‚à∑ []))
  --
  œïv : uuvv ‚â§ vv
  œïv = step ‚à∑ (refl-‚â§-ùüö ‚à∑ (refl-‚â§-ùüö ‚à∑ []))


  ---------------------------------------------
  -- Sending a vector between processes by sending n elements individually.
  --
  -- Conceptually, the example is simple:
  --
  -- We need to give a function `f ‚à∂ (n ‚à∂ ‚Ñï / Ôº† (u ‚àß v)) ‚Üí (v : Vec BB n / Ôº† u) ‚Üí Vec BB n / Ôº† v`
  -- Note that we skip over the narrowing transformations required on n to make the type more readable.
  -- We construct this function by introducing only the first argument `n` with a lambda, and then
  -- do crisp induction on it with a motive
  --   C : (n ‚à∂ ‚Ñï / Ôº† (u ‚àß v)) ‚ä¢ Vec BB n / Ôº† u ‚Üí Vec BB n / Ôº† v.
  --
  -- This means that in the base case, we have to give a function
  --   f‚ÇÄ : Vec BB 0 / Ôº† u ‚Üí Vec BB 0 / Ôº† v
  -- which is done by simply constructing the empty vector at v using `nil`.
  --
  -- In the induction case, we can assume that we already have a function
  --   f‚Çô : Vec BB n / Ôº† u ‚Üí Vec BB n / Ôº† v,
  -- which can send an n-element vector, and we have to upgrade it to a function
  --   f‚Çõ‚Çô : Vec BB (suc n) / Ôº† u ‚Üí Vec BB (suc n) / Ôº† v.
  -- We do so by using f‚Çô to send the tail of (v : Vec BB (suc n)), and then
  -- sending the head of v by using `transform`.
  --
  -- Note that we do need crisp induction here, since our `n : ‚Ñï` is under the `Ôº† (u ‚àß v)`, but we don't
  -- want our result to be under that same annotation.
  --
  --
  -- The implementation of `send-vec` below is mostly complicated by the fact that we need to use the
  -- `conv` rule thrice in order to evaluate function applications in our term. In a proper typechecker
  -- this would happen automatically.
  --
  -- Also note that there are some open agda-holes left. These are places where a proof of well-formedness
  -- of the context is expected, but our partial typechecking algorithm is currently too weak to fill them.
  -- Giving them manually is possible of course, but would complicate the resulting term even more.
  -- We thus left them open.
  send-vec : ŒµŒµ
    ‚ä¢
      Œ† NN / Ôº† uuvv ‚ñπ
      Œ† Vec BB (x0[ œÑ·µàÀ¢ œïu ]) / Ôº† uu ‚ñπ
      ‚ü® Vec BB (x1[ œÑ·µàÀ¢ œïv ]) ‚à£ Ôº† vv ‚ü© ‚à• []
      ‚âî _
  send-vec =
    -- We introduce the first argument, (n ‚à∂ ‚Ñï / Ôº† (u ‚àß v))
    lam‚±º NN‚±º ‚Ü¶
    -- We convert the result type by applying Œ≤-reduction
    conv ((univ (Œ≤-red (NN‚±º) ((Œ†‚±º Vec‚±º BB‚±º x0[ œÑ·µàÀ¢ œïu ]‚±º  ‚ñπ Modal‚±º (Vec‚±º BB‚±º (var (suc zero) (œÑ·µàÀ¢ œïv))))) x0[ idT‚±º ]‚±º)))

      -- The actual work happens here, by using crisp induction, namely
      ((wk-Term natrec-crisp)
      --   1. Our motive is C : (n ‚à∂ ‚Ñï / Ôº† (u ‚àß v)) ‚ä¢ Vec BB n / Ôº† u ‚Üí Vec BB n / Ôº† v.
      ‚àò‚±º (lam‚±º NN‚±º ‚Ü¶ (Œ†‚±º_‚ñπ_ {Œº = Ôº† uu} (Vec‚±º (BB‚±º) (var zero (œÑ·µàÀ¢ œïu))) (Modal‚±º {Œ∑ = Ôº† vv} (Vec‚±º (BB‚±º) (var (suc zero) (œÑ·µàÀ¢ œïv))))))
      --   2. We do induction on n.
      ‚àò‚±º x0‚±º
      --   3. In the base case we create the empty vector.
      ‚àò‚±º conv (sym‚Çë (univ (Œ≤-red NN‚±º ((Œ†‚±º Vec‚±º BB‚±º x0[ œÑ·µàÀ¢ œïu ]‚±º  ‚ñπ Modal‚±º (Vec‚±º (BB‚±º) (var (suc zero) (œÑ·µàÀ¢ œïv))))) zero‚±º)))
         (lam‚±º Vec‚±º BB‚±º zero‚±º ‚Ü¶ mod‚±º nil‚±º)
      --   4. In the induction case we:
      ‚àò‚±º (
         --  4.1. Introduce a local n' for which we have to show the induction step.
         lam‚±º NN‚±º ‚Ü¶
         --  4.2. Introduce f‚Çô which can send an n-element vector.
         lam‚±º Univ‚±º ((lam‚±º NN‚±º ‚Ü¶ (Œ†‚±º Vec‚±º BB‚±º x0[ œÑ·µàÀ¢ œïu ]‚±º ‚ñπ Modal‚±º (Vec‚±º (BB‚±º ) x1[ œÑ·µàÀ¢ œïv ]‚±º))) ‚àò‚±º x0‚±º) ‚Ü¶ 
         --  4.3. Produce a function which can send an (n'+1)-element vector, but we have to use `conv` again.
         conv (sym‚Çë (univ (Œ≤-red (NN‚±º {{{!!}}}) ((Œ†‚±º Vec‚±º (BB‚±º {{{!!}}} ) x0[ œÑ·µàÀ¢ œïu ]‚±º  ‚ñπ Modal‚±º (Vec‚±º (BB‚±º {{{!!}}}) (var (suc zero) (œÑ·µàÀ¢ œïv))))) (suc‚±º x1‚±º))))
              -- 4.3.1. Inside of conv, we create f‚Çõ‚Çô by introducing a vector v' of length (n'+1)
              (lam‚±º Vec‚±º (BB‚±º {{{!!}}}) (suc‚±º x1[ œÑ·µàÀ¢ œïu ]‚±º) ‚Ü¶
              -- 4.3.2. We call f‚Çô on the tail of v'. We have to use conv and unmod to extract the result.
                letunmod‚±º[ id ]
                  (
                    (conv (univ (let xx = (Œ≤-red ((NN‚±º {{{!!}}})) (((Œ†‚±º Vec‚±º (BB‚±º {{{!!}}}) x0[ œÑ·µàÀ¢ œïu ]‚±º  ‚ñπ Modal‚±º (Vec‚±º (BB‚±º {{{!!}}}) x1[ œÑ·µàÀ¢ œïv ]‚±º)))) x2‚±º) in xx))
                      x1[ idT‚±º ]‚±º
                     ) ‚àò‚±º tail‚±º x0[ idT‚±º ]‚±º
                  )
                  into Modal‚±º ((Vec‚±º (BB‚±º {{{!!}}}) (suc‚±º x3[ œÑ·µàÀ¢ œïv ]‚±º)))
                  by
                  -- 4.3.3. We prepare sending by letting the head of v'.
                  (letunmod‚±º[ id ] mod‚±º {Œ∑ = Ôº† uu} (head‚±º x1‚±º) into (Modal‚±º (Vec‚±º (BB‚±º {{{!!}}}) (suc‚±º x4[ œÑ·µàÀ¢ œïv ]‚±º)))
                  by
                  mod‚±º (
                  -- 4.3.4. We construct the result by sending (head v') and combining with the result of (f‚Çô (tail v'))
                    cons‚±º
                      x0[ (id ‚òÖŒ∑·µàÀ¢‚òÖ Ôº† uu) ‚óÜ*‚ÇÇ‚Çò (Ôº† vv ‚òÖŒµ·µàÀ¢‚òÖ id) ]‚±º

                      (x1‚±º)
                      )
              ))
         ))


