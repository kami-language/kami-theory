
module KamiTheory.Main.Dependent.Concrete.SendReceiveNarrow where

open import Agora.Conventions
open import Agora.Order.Preorder
open import KamiTheory.Main.Generic.ModeSystem.Definition

------------------------------------------------------------------------
-- We instantiate our generic type theory with the mode system
-- which we present for version 1 of the dependent Kami language.
--

module _ (P : Preorder 𝑖) where

  private variable
    U V : ⟨ P ⟩

  ---------------------------------------------
  -- modes

  -- modes are "copies" of MLTT inside our type theory
  data Mode : Set where
    ▲ : Mode -- the local mode
    ◯ : Mode -- the global mode

  ---------------------------------------------
  -- mode homomorphisms (modalities)

  -- modalities are morphisms between modes,
  -- they are generated by the following two
  -- base mode homs.
  data BaseModeHom : (m n : Mode) -> 𝒰 (𝑖 ⌄ 0) where
    `＠` : ∀(U : ⟨ P ⟩) -> BaseModeHom ▲ ◯
    `[]` : BaseModeHom ◯ ▲

  ---------------------------------------------
  -- mode transformations

  data BaseModeTrans : {m n : Mode} (μs ηs : Path BaseModeHom m n) -> Visibility -> 𝒰 𝑖 where
    narrow : U ≤ V -> BaseModeTrans (`＠` U ⨾ id) (`＠` V ⨾ id) invis
    send : ∀ U -> BaseModeTrans id (`＠` U ⨾ `[]` ⨾ id) vis
    recv : ∀ U -> BaseModeTrans (`[]` ⨾ `＠` U ⨾ id) id vis

  SRN : 2Graph _
  SRN = record
    { Point = Mode
    ; Edge = BaseModeHom
    ; Face = BaseModeTrans
    }



