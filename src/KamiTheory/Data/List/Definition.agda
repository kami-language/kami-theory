-- SPDX-FileCopyrightText: 2024 Olivia R√∂hrig
-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Data.List.Definition where

open import Agora.Conventions hiding (Œ£ ; Lift ; k)

open import KamiTheory.Basics


[_] : ‚àÄ {ùëñ} {A : Set ùëñ} ‚Üí A ‚Üí List A
[ a ] = a ‚à∑ []

module _ {A : Set ùëñ} where

  infix 4 _‚àà_

  data _‚àà_ : (a : A) ‚Üí (as : List A) ‚Üí Set ùëñ where
    here : ‚àÄ {a : A} {as : List A} ‚Üí a ‚àà (a ‚à∑ as)
    there : ‚àÄ {a b : A} {as : List A} ‚Üí a ‚àà as ‚Üí a ‚àà (b ‚à∑ as)

  ‚àâ[] : ‚àÄ {a : A} ‚Üí ¬¨ (a ‚àà [])
  ‚àâ[] {a} ()

  infix 4 _‚äÜ_
  _‚äÜ_ : List A ‚Üí List A ‚Üí Set ùëñ
  as ‚äÜ bs = ‚àÄ x ‚Üí x ‚àà as ‚Üí x ‚àà bs

  ‚äà[] : ‚àÄ {as : List A} ‚Üí ¬¨ (as ‚â° []) ‚Üí ¬¨ (as ‚äÜ [])
  ‚äà[] {[]} as‚â¢[] x = refl ‚ÜØ as‚â¢[]
  ‚äà[] {x‚ÇÅ ‚à∑ as} as‚â¢[] x = x x‚ÇÅ here ‚ÜØ Œª ()

  ‚äÜ‚à∑ : ‚àÄ {a : A} {as bs : List A} ‚Üí (a ‚à∑ as) ‚äÜ bs ‚Üí as ‚äÜ bs
  ‚äÜ‚à∑ sf = Œª x x‚ÇÅ ‚Üí sf x (there x‚ÇÅ)

  _‚àà?_ : {{_ : hasDecidableEquality A}} ‚Üí (a : A) ‚Üí (as : List A) ‚Üí isDecidable (a ‚àà as)
  a ‚àà? [] = no Œª ()
  a ‚àà? (b ‚à∑ as) with (a ‚âü b) | a ‚àà? as
  ...               | yes refl | _ = yes here
  ...               | no _ | yes a‚ààas = yes (there a‚ààas)
  ...               | no a‚â†b | no a‚àâas = no Œª { here ‚Üí refl ‚ÜØ a‚â†b; (there a‚ààas) ‚Üí a‚ààas ‚ÜØ a‚àâas}


  _‚äÜ?_ : {{_ : hasDecidableEquality A}} ‚Üí (as bs : List A) ‚Üí isDecidable (as ‚äÜ bs)
  [] ‚äÜ? bs = yes (Œª c ())
  (a ‚à∑ as) ‚äÜ? [] = no Œª { all ‚Üí all a here ‚ÜØ ‚àâ[]}
  (a ‚à∑ as) ‚äÜ? bs with a ‚àà? bs | as ‚äÜ? bs
  ... | yes a‚ààbs | yes all = yes (Œª { c here ‚Üí a‚ààbs ; c (there x) ‚Üí all c x})
  ... | yes a‚ààbs | no as‚äàbs = no (Œª { all ‚Üí (Œª c c‚ààas ‚Üí all c (there c‚ààas)) ‚ÜØ as‚äàbs})
  ... | no a‚àâbs | _ = no Œª { all ‚Üí all a here ‚ÜØ a‚àâbs}

  open import Data.List.Base

  instance
    hasDecidableEquality:List : {{_ : hasDecidableEquality A}} -> hasDecidableEquality (List A)
    hasDecidableEquality:List = {!it!}



{-
  data _‚äÜ_ : List A ‚Üí List A ‚Üí Set ùëñ  where
    stop : [] ‚äÜ []
    drop : ‚àÄ {a as bs} ‚Üí as ‚äÜ bs ‚Üí as ‚äÜ (a ‚à∑ bs)
    keep : ‚àÄ {a as bs} ‚Üí as ‚äÜ bs ‚Üí (a ‚à∑ as) ‚äÜ (a ‚à∑ bs)

  []‚äÜ : ‚àÄ {bs} ‚Üí [] ‚äÜ bs
  []‚äÜ {[]} = stop
  []‚äÜ {x ‚à∑ bs} = drop ([]‚äÜ)
    
  refl‚äÜ : ‚àÄ {as : List A} ‚Üí as ‚äÜ as
  refl‚äÜ {[]} = stop
  refl‚äÜ {x ‚à∑ as} = keep refl‚äÜ
  
  ‚à∑‚äÜ : ‚àÄ {a : A} {as bs : List A} ‚Üí (a ‚à∑ as) ‚äÜ bs ‚Üí as ‚äÜ bs
  ‚à∑‚äÜ (keep p) = drop p
  ‚à∑‚äÜ (drop p) = drop (‚à∑‚äÜ p)
  
  ‚äÜ‚àà : ‚àÄ {a : A} {as bs : List A} ‚Üí a ‚àà as ‚Üí as ‚äÜ bs ‚Üí a ‚àà bs
  ‚äÜ‚àà here (drop x‚ÇÅ) = there (‚äÜ‚àà here x‚ÇÅ)
  ‚äÜ‚àà (there x) (drop x‚ÇÅ) = there (‚äÜ‚àà x (‚à∑‚äÜ x‚ÇÅ))
  ‚äÜ‚àà here (keep x‚ÇÅ) = here
  ‚äÜ‚àà (there x) (keep x‚ÇÅ) = there (‚äÜ‚àà x x‚ÇÅ)
  
  trans‚äÜ : ‚àÄ {as bs cs : List A} ‚Üí as ‚äÜ bs ‚Üí bs ‚äÜ cs ‚Üí as ‚äÜ cs
  trans‚äÜ stop _ = []‚äÜ
  trans‚äÜ (keep x) (drop x‚ÇÅ) = drop (trans‚äÜ (keep x) x‚ÇÅ)
  trans‚äÜ (keep x) (keep x‚ÇÅ) = keep (trans‚äÜ x x‚ÇÅ)
  trans‚äÜ (drop x) x‚ÇÅ = trans‚äÜ x (‚à∑‚äÜ x‚ÇÅ)
  
  ‚äà[] : ‚àÄ {as : List A} ‚Üí ¬¨ (as ‚â° []) ‚Üí ¬¨ (as ‚äÜ [])
  ‚äà[] {[]} as‚â¢[] x = refl ‚ÜØ as‚â¢[]
  ‚äà[] {x‚ÇÅ ‚à∑ as} as‚â¢[] ()
  
 
  ‚äÜ‚à∑ : ‚àÄ {a : A} {as bs : List A} ‚Üí as ‚äÜ bs ‚Üí as ‚äÜ (a ‚à∑ bs)
  ‚äÜ‚à∑ stop = drop stop
  ‚äÜ‚à∑ (drop a) = drop (drop a)
  ‚äÜ‚à∑ (keep a) = (drop (keep a))
-}

{-
  _‚äÜ?_ : {{_ : hasDecidableEquality A}} ‚Üí (as bs : List A) ‚Üí isDecidable (as ‚äÜ bs)
  [] ‚äÜ? bs = yes []‚äÜ
  (a ‚à∑ as) ‚äÜ? [] = no (‚äà[] (Œª ()))
  (a ‚à∑ as) ‚äÜ? (b ‚à∑ bs) with a ‚âü b
  aas@(a ‚à∑ as) ‚äÜ? (b ‚à∑ bs) | no x with aas ‚äÜ? bs
  (a ‚à∑ as) ‚äÜ? (b ‚à∑ bs)     | no x | no y = no (Œª { (drop x‚ÇÅ) ‚Üí x‚ÇÅ ‚ÜØ y ; (keep x‚ÇÅ) ‚Üí refl ‚ÜØ x})
  (a ‚à∑ as) ‚äÜ? (b ‚à∑ bs)     | no x | yes y = yes (drop y)
  (a ‚à∑ as) ‚äÜ? (b ‚à∑ bs)     | yes refl with as ‚äÜ? bs
  ... | no x‚ÇÅ = no Œª { (drop x) ‚Üí ‚à∑‚äÜ x ‚ÜØ x‚ÇÅ ; (keep x) ‚Üí x ‚ÜØ x‚ÇÅ}
  ... | yes x‚ÇÅ = yes (keep x‚ÇÅ)
-}




module _ {X : ùí∞ ùëñ} where
  open import Data.Fin using (Fin ; suc ; zero)
  open import Data.Fin.Properties renaming (suc-injective to isInjective:suc)

  data _‚àà_at_ : (x : X) -> (xs : List X) -> Fin (length xs) -> ùí∞ ùëñ where
    take : ‚àÄ{x} {xs} -> x ‚àà (x ‚à∑ xs) at zero
    skip : ‚àÄ{x y} {xs i} -> y ‚àà xs at i -> y ‚àà x ‚à∑ xs at suc i

  indexOf : ‚àÄ{x : X} -> {xs : List X} -> x ‚àà xs -> Fin (length xs)
  indexOf here = zero
  indexOf (there p) = suc (indexOf p)

  indexed : ‚àÄ{x : X} -> {xs : List X} -> (p : x ‚àà xs) -> x ‚àà xs at indexOf p
  indexed here = take
  indexed (there p) = skip (indexed p)

  unindexed : ‚àÄ{x : X} -> {xs : List X} -> ‚àÄ{i} -> (p : x ‚àà xs at i) -> x ‚àà xs
  unindexed take = here
  unindexed (skip p) = there (unindexed p)

  Œ≤-indexed : ‚àÄ{xs : List X} -> ‚àÄ{x i} -> {p : x ‚àà xs at i} -> indexOf (unindexed p) ‚â° i
  Œ≤-indexed {p = take} = refl-‚â°
  Œ≤-indexed {p = skip p} = cong-‚â° suc (Œ≤-indexed)

  transport-indexed : ‚àÄ{xs ys : List X} -> (œï : xs ‚äÜ ys) -> ‚àÄ{x i} -> (p : x ‚àà xs at i) -> x ‚àà ys at indexOf (œï x (unindexed p))
  transport-indexed œï p = indexed (œï _ (unindexed p))

  isUnique : List X -> ùí∞ _
  isUnique xs = ‚àÄ{x} -> (p q : x ‚àà xs) -> indexOf p ‚â° indexOf q

  isInjective‚Çä:indexOf : ‚àÄ{xs : List X} -> ‚àÄ{x y} -> {p : x ‚àà xs} -> {q : y ‚àà xs} -> indexOf p ‚â° indexOf q -> x ‚â° y
  isInjective‚Çä:indexOf {p = here} {q = here} ip‚â°iq = refl-‚â°
  isInjective‚Çä:indexOf {p = (there p)} {q = (there q)} ip‚â°iq = isInjective‚Çä:indexOf (isInjective:suc ip‚â°iq)

  isInjective:indexOf : ‚àÄ{xs : List X} -> ‚àÄ{x} -> {p q : x ‚àà xs} -> indexOf p ‚â° indexOf q -> p ‚â° q
  isInjective:indexOf {p = here} {here} P = refl
  isInjective:indexOf {p = there p} {there q} P with isInjective:indexOf (isInjective:suc P)
  ... | refl-‚â° = refl-‚â°

  -- transport-‚àà,index : ‚àÄ{xs ys : List X} -> xs ‚äÜ ys -> ‚àÄ{x i} -> x ‚àà xs at i -> Fin (length ys)
  -- transport-‚àà,index = {!!}

  -- transport-‚ààat : ‚àÄ{xs ys : List X} -> xs ‚äÜ ys -> ‚àÄ{x i} -> x ‚àà xs at i -> ‚àë Œª j -> x ‚àà ys at j
  -- transport-‚ààat p = {!!}

  -- isInjective:transport-‚ààat : 

  -- data _‚äÜ‚Å±‚Åø·µà_ : (u : List X) -> (v : List X) -> ùí∞ ùëñ where
  --   [] : ‚àÄ{vs} -> [] ‚äÜ‚Å±‚Åø·µà vs
  --   _‚à∑_ : ‚àÄ{u us vs} -> u ‚àà vs -> us ‚äÜ‚Å±‚Åø·µà vs -> (u ‚à∑ us) ‚äÜ‚Å±‚Åø·µà vs





