
{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Data.UniqueSortedList.NonEmpty where

open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Conventions
open import KamiTheory.Basics
open import KamiTheory.Data.List.Definition
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Order.StrictOrder.Instances.UniqueSortedList

module _ {A : ùí∞ ùëñ} where
  data isNonEmptyList : (as : List A) -> ùí∞ ùëñ where
    done : ‚àÄ{a as} -> isNonEmptyList (a ‚à∑ as)

-- nonempty finite power sets over A
module _ (A : StrictOrder ùëñ) where
  NonEmptyUniqueSortedList : Set ùëñ
  NonEmptyUniqueSortedList = ‚àë Œª (x : ùí´·∂†‚Å±‚Åø A) -> isNonEmptyList ‚ü® x ‚ü©

  macro ùí´‚Çä·∂†‚Å±‚Åø = #structureOn NonEmptyUniqueSortedList

module _ {A : StrictOrder ùëñ} where
  ‚¶ó_‚¶ò‚Çä : ‚ü® A ‚ü© -> ùí´‚Çä·∂†‚Å±‚Åø A
  ‚¶ó_‚¶ò‚Çä a = ((a ‚à∑ []) since [-]) , done


module _ {A : StrictOrder ùëñ} where

  record _‚àº-ùí´‚Çä·∂†‚Å±‚Åø_ (a b : ùí´‚Çä·∂†‚Å±‚Åø A) : Set ùëñ where
    constructor incl
    field ‚ü®_‚ü© : fst a ‚àº fst b
  open _‚àº-ùí´‚Çä·∂†‚Å±‚Åø_ public

  instance
    isEquivRel:‚àº-ùí´‚Çä·∂†‚Å±‚Åø : isEquivRel (_‚àº-ùí´‚Çä·∂†‚Å±‚Åø_)
    isEquivRel:‚àº-ùí´‚Çä·∂†‚Å±‚Åø = record { refl-‚àº = {!!} ; sym = {!!} ; _‚àô_ = {!!} }

  -- `ùí´‚Çä·∂†‚Å±‚Åø A` forms a setoid with strict equality
  instance
    isSetoid:ùí´‚Çä·∂†‚Å±‚Åø : isSetoid (ùí´‚Çä·∂†‚Å±‚Åø A)
    isSetoid:ùí´‚Çä·∂†‚Å±‚Åø = record { _‚àº_ = _‚àº-ùí´‚Çä·∂†‚Å±‚Åø_ }

  -- `ùí´‚Çä·∂†‚Å±‚Åø A` forms a preorder with _‚äÜ_ as relation
  record _‚â§-ùí´‚Çä·∂†‚Å±‚Åø_ (U V : ùí´‚Çä·∂†‚Å±‚Åø A) : Set ùëñ where
    constructor incl
    field ‚ü®_‚ü© : fst U ‚â§ fst V
  open _‚â§-ùí´‚Çä·∂†‚Å±‚Åø_ {{...}} public

  refl-‚â§-ùí´‚Çä·∂†‚Å±‚Åø : ‚àÄ{U} -> U ‚â§-ùí´‚Çä·∂†‚Å±‚Åø U
  refl-‚â§-ùí´‚Çä·∂†‚Å±‚Åø = incl refl-‚â§

  _‚ü°-ùí´‚Çä·∂†‚Å±‚Åø_ : ‚àÄ{U V W} -> U ‚â§-ùí´‚Çä·∂†‚Å±‚Åø V -> V ‚â§-ùí´‚Çä·∂†‚Å±‚Åø W -> U ‚â§-ùí´‚Çä·∂†‚Å±‚Åø W
  incl p ‚ü°-ùí´‚Çä·∂†‚Å±‚Åø incl q = incl (p ‚ü° q)

  instance
    isPreorderData:‚â§-ùí´‚Çä·∂†‚Å±‚Åø : isPreorderData (ùí´‚Çä·∂†‚Å±‚Åø A) _‚â§-ùí´‚Çä·∂†‚Å±‚Åø_
    isPreorderData:‚â§-ùí´‚Çä·∂†‚Å±‚Åø = record
      { refl-‚â§ = refl-‚â§-ùí´‚Çä·∂†‚Å±‚Åø
      ; _‚ü°_ = _‚ü°-ùí´‚Çä·∂†‚Å±‚Åø_
      ; transp-‚â§ = {!!} -- Œª {refl refl x‚ÇÇ ‚Üí x‚ÇÇ}
      }

  -- `ùí´‚Çä·∂†‚Å±‚Åø A` has finite joins (least upper bounds / maximum / or)
  instance
    isPreorder:ùí´‚Çä·∂†‚Å±‚Åø : isPreorder _ (ùí´‚Çä·∂†‚Å±‚Åø A)
    isPreorder:ùí´‚Çä·∂†‚Å±‚Åø = record { _‚â§_ = _‚â§-ùí´‚Çä·∂†‚Å±‚Åø_ }


module _ {A : StrictOrder ùëñ} where
  open Agora.Order.Preorder
  open Structure -- funnily this is needed for `of_` to work

  private instance _ = hasDecidableEquality:byStrictOrder {{of A}}


  decide-‚â§-ùí´‚Çä·∂†‚Å±‚Åø : ‚àÄ(u v : ùí´‚Çä·∂†‚Å±‚Åø A) -> (¬¨ (u ‚â§ v)) +-ùí∞ (u ‚â§ v)
  decide-‚â§-ùí´‚Çä·∂†‚Å±‚Åø u v with decide-‚â§ (fst u) (fst v)
  ... | yes p = right (incl p)
  ... | no ¬¨p = left (Œª p -> ¬¨p ‚ü® p ‚ü©)


  instance
    isDecidablePreorder:‚â§-ùí´‚Çä·∂†‚Å±‚Åø : isDecidablePreorder (ùí´‚Çä·∂†‚Å±‚Åø A)
    isDecidablePreorder:‚â§-ùí´‚Çä·∂†‚Å±‚Åø =
      record { decide-‚â§ = decide-‚â§-ùí´‚Çä·∂†‚Å±‚Åø }

  decide-‚â°-ùí´‚Çä·∂†‚Å±‚Åø : (u v : ùí´‚Çä·∂†‚Å±‚Åø A) -> (¬¨ (u ‚â° v)) +-ùí∞ (u ‚â° v)
  decide-‚â°-ùí´‚Çä·∂†‚Å±‚Åø (u , done) (v , done) with u ‚âü v
  ... | no x = no Œª p -> x (cong-‚â° fst p)
  ... | yes refl-‚â° = yes refl-‚â°

  instance
    hasDecidableEquality:ùí´‚Çä·∂†‚Å±‚Åø : hasDecidableEquality (ùí´‚Çä·∂†‚Å±‚Åø A)
    hasDecidableEquality:ùí´‚Çä·∂†‚Å±‚Åø = record { _‚âü_ = decide-‚â°-ùí´‚Çä·∂†‚Å±‚Åø }


module _ {A : StrictOrder ùëñ} where
  singleton-‚â§-‚â° : ‚àÄ{qs : ùí´‚Çä·∂†‚Å±‚Åø A} -> ‚àÄ{p} -> qs ‚â§-ùí´‚Çä·∂†‚Å±‚Åø ‚¶ó p ‚¶ò‚Çä -> qs ‚â° (‚¶ó_‚¶ò‚Çä p )
  singleton-‚â§-‚â° {qs = (([] since []) , ())} pp
  singleton-‚â§-‚â° {qs = ((p ‚à∑ [] since [-]) , done)} pp with ‚ü® ‚ü® pp ‚ü© ‚ü© _ here
  ... | here = refl-‚â°
  singleton-‚â§-‚â° {qs = ((p ‚à∑ q ‚à∑ ps) since (x ‚à∑ Ps)) , rs} pp with ‚ü® ‚ü® pp ‚ü© ‚ü© _ here | ‚ü® ‚ü® pp ‚ü© ‚ü© _ (there here)
  ... | here | here = ‚ä•-elim (irrefl-< x)
