

{-# OPTIONS --allow-unsolved-metas #-}

module KamiTheory.Data.UniqueSortedList.Properties where

open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Conventions
open import Agora.Data.Fin.Definition
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.List.Definition
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Basics


module _ {๐} {A : Set ๐} {{AP : hasStrictOrder A}} where
  hasDecidableEquality:byStrictOrder : hasDecidableEquality A
  hasDecidableEquality:byStrictOrder = record { _โ_ = f }
    where
      f : (a b : A) -> _
      f a b with conn-< a b
      ... | tri< a<b aโขb aโฏb = no ฮป {refl -> irrefl-< a<b}
      ... | triโก aโฎb aโกb aโฏb = yes aโกb
      ... | tri> aโฎb aโขb a>b = no ฮป {refl -> irrefl-< a>b}




module _ {A : ๐ฐ ๐} {{Ap : hasStrictOrder A}} where



  split-โ : โ{b} {bs : List A} -> b โ bs -> โ ฮป bs0 -> โ ฮป bs1 -> bs0 <> (b โท bs1) โก bs
  split-โ here = [] , _ , refl-โก
  split-โ {bs = x โท bs} (there p) using
    bs0 , bs1 , p <- split-โ p
    = (x โท bs0) , bs1 , cong-โก (x โท_) p

  comp-<,โ : โ{x y a} -> {as : List A} -> isUniqueSorted (a โท as) -> x < a -> y โ a โท as -> x < y
  comp-<,โ Paas x<a here = x<a
  comp-<,โ (x โท Paas) x<a (there q) = comp-<,โ Paas (trans-< x<a x) q

  restrict-โ : โ{x y} {bs0 bs1 : List A} -> isUniqueSorted (bs0 <> (x โท bs1)) -> x < y -> y โ bs0 <> (x โท bs1) -> y โ bs1
  restrict-โ {bs0 = []} Pbs x<y here = โฅ-elim (irrefl-< x<y)
  restrict-โ {bs0 = []} Pbs x<y (there q) = q
  restrict-โ {bs0 = x โท bs0} Pbs x<y here = let q = comp-<,โ Pbs x<y (ฮนโ-โ-โ {bs = x โท bs0} here) in โฅ-elim (irrefl-< q)
  restrict-โ {bs0 = x โท []} Pbs x<y (there here) = โฅ-elim (irrefl-< x<y)
  restrict-โ {bs0 = x โท []} Pbs x<y (there (there q)) = q
  restrict-โ {bs0 = x โท xโ โท bs0} (xโ โท Pbs) x<y (there q) = restrict-โ {bs0 = xโ โท bs0} Pbs x<y q


  split-โ : โ{x} {as bs0 bs1 : List A}
          -> isUniqueSorted (x โท as) -> isUniqueSorted (bs0 <> (x โท bs1))
          -> x โท as โ bs0 <> (x โท bs1) -> as โ bs1
  split-โ {x = x} {as = []} {bs0 = bs0} {bs1} Pas Pbs p y ()
  split-โ {x = x} {as = a โท as} {bs0 = bs0} {bs1} (x<a โท Pas) Pbs p y yp
    using z <- p y (there yp)
    = restrict-โ Pbs (comp-<,โ Pas x<a yp) z

  drop-isUniqueSorted : โ{a} {as : List A} -> isUniqueSorted (a โท as) -> isUniqueSorted as
  drop-isUniqueSorted [-] = []
  drop-isUniqueSorted (x โท Pas) = Pas

  drop*-isUniqueSorted : {bs as : List A} -> isUniqueSorted (bs <> as) -> isUniqueSorted as
  drop*-isUniqueSorted {bs = []} p = p
  drop*-isUniqueSorted {bs = x โท bs} p = drop*-isUniqueSorted {bs = bs} (drop-isUniqueSorted p)

  from-โ : โ {as bs : List A} -> isUniqueSorted as -> isUniqueSorted bs -> as โ bs -> as โผ bs
  from-โ {as = []} {bs = bs} Pas Pbs p = []โผ
  from-โ {as = x โท as} {bs = bs} Pas Pbs p with split-โ (p _ here)
  ... | bs0 , bs1 , refl-โก = ฮนโ-โ-โผ {bs = bs0} (take (from-โ (drop-isUniqueSorted Pas) (drop-isUniqueSorted (drop*-isUniqueSorted {bs = bs0} Pbs)) (split-โ Pas Pbs p)))

  into-โ : โ {as bs : List A} -> as โผ bs -> as โ bs
  into-โ done = refl-โ
  into-โ (skip p) = skip-โ (into-โ p)
  into-โ (take p) = take-โ (into-โ p)




  -----------------------------------------
  -- deciding equality

  private instance _ = hasDecidableEquality:byStrictOrder {{Ap}}

  decide-โผ : (as bs : List A) -> isUniqueSorted as -> isUniqueSorted bs -> isDecidable (as โผ bs)
  decide-โผ as bs Pas Pbs with as โ? bs
  ... | no x = no (ฮป p -> x (into-โ p))
  ... | yes x = yes (from-โ Pas Pbs x)


module _ {A : StrictOrder ๐} where

  ฮนโ-โช-โผ : โ {as bs : UniqueSortedList A} โ โจ as โฉ โผ (โจ as โฉ โช โจ bs โฉ)
  ฮนโ-โช-โผ {as = as} {bs} = from-โ (of as) (โช-sorted (of as) (of bs)) (ฮนโ-โช )

  ฮนโ-โช-โผ : โ {as bs : UniqueSortedList A} โ โจ bs โฉ โผ (โจ as โฉ โช โจ bs โฉ)
  ฮนโ-โช-โผ {as = as} {bs} = from-โ (of bs) (โช-sorted (of as) (of bs)) (ฮนโ-โช {as = โจ as โฉ})

  [_,_]-โช-โผ : โ {as bs cs : UniqueSortedList A} โ โจ as โฉ โผ โจ cs โฉ -> โจ bs โฉ โผ โจ cs โฉ -> (โจ as โฉ โช โจ bs โฉ) โผ โจ cs โฉ
  [_,_]-โช-โผ {as} {bs} {cs} p q = from-โ (โช-sorted (of as) (of bs)) (of cs) [ into-โ p , into-โ q ]-โช



